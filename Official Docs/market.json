{
  "openapi": "3.0.2",
  "info": {
    "title": "Lolzteam Public API: Market",
    "description": "\n[Forum API](https://docs.api.zelenka.guru/?forum)\n\n\n**API free libraries**\n\n\n+ [Node.js](https://github.com/NztForum/node-lzt) \n+ [Python](https://github.com/AS7RIDENIED/Lolzteam_Python_Api)\n+ [C#](https://github.com/fanidamn/LolzMarketAPI)\n\n**Rate limit**\n\n\n+ 20 requests per minute (3 seconds delay between per request)\nIf you exceed the limit, the response code 429 will be returned to you.\n\n**Authorization**\n\n\nFor using this api you need to create API Client and get Access Token with **market** scope.\n\n**Content-Type**\n\napplication/x-www-form-urlencoded.\n\nYou can import the API into Postman using [this](https://docs.api.zelenka.guru/swagger/market.json) file.\n\n**Is for free access?**\n\nTo use the market api, you need to have 200 sympathies, or you can purchase monthly subscription [here](https://zelenka.guru/account/upgrades).",
    "version": "1.1.18"
  },
  "servers": [
    {
      "url": "https://api.lzt.market",
      "description": "Production."
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "Get Last Accounts",
        "description": "Displays a list of latest accounts.",
        "operationId": "accountsList.getLatest",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/steam": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "Steam",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListSteam",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/email_type",
            "schema": {
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "autoreg",
                  "native",
                  "no",
                  "no_market"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/item_domain"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "$ref": "#/components/parameters/game_int"
          },
          {
            "$ref": "#/components/parameters/steam_hours_played"
          },
          {
            "$ref": "#/components/parameters/steam_hours_played_max"
          },
          {
            "name": "eg",
            "in": "query",
            "description": "Guarantee type.\n+ **-1** - 12 hours\n+ **0** - 24 hours\n+ **1** - 3 days",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Extended Guarantee",
              "type": "integer",
              "description": "Guarantee type.\n+ **-1** - 12 hours\n+ **0** - 24 hours\n+ **1** - 3 days",
              "enum": [
                -1,
                0,
                1
              ]
            }
          },
          {
            "$ref": "#/components/parameters/steam_vac"
          },
          {
            "$ref": "#/components/parameters/steam_rt"
          },
          {
            "$ref": "#/components/parameters/steam_trade_ban"
          },
          {
            "$ref": "#/components/parameters/steam_trade_limit"
          },
          {
            "$ref": "#/components/parameters/daybreak"
          },
          {
            "$ref": "#/components/parameters/steam_limit"
          },
          {
            "$ref": "#/components/parameters/steam_mafile"
          },
          {
            "$ref": "#/components/parameters/reg"
          },
          {
            "$ref": "#/components/parameters/reg_period"
          },
          {
            "$ref": "#/components/parameters/lmin"
          },
          {
            "$ref": "#/components/parameters/lmax"
          },
          {
            "$ref": "#/components/parameters/steam_rmin"
          },
          {
            "$ref": "#/components/parameters/steam_rmax"
          },
          {
            "$ref": "#/components/parameters/steam_wingman_rmin"
          },
          {
            "$ref": "#/components/parameters/steam_wingman_rmax"
          },
          {
            "$ref": "#/components/parameters/steam_no_vac"
          },
          {
            "$ref": "#/components/parameters/steam_mm_ban"
          },
          {
            "$ref": "#/components/parameters/balance_min"
          },
          {
            "$ref": "#/components/parameters/balance_max"
          },
          {
            "$ref": "#/components/parameters/steam_inv_game"
          },
          {
            "$ref": "#/components/parameters/steam_inv_min"
          },
          {
            "$ref": "#/components/parameters/steam_inv_max"
          },
          {
            "$ref": "#/components/parameters/steam_friend_min"
          },
          {
            "$ref": "#/components/parameters/steam_friend_max"
          },
          {
            "$ref": "#/components/parameters/steam_gmin"
          },
          {
            "$ref": "#/components/parameters/steam_gmax"
          },
          {
            "$ref": "#/components/parameters/steam_win_count_min"
          },
          {
            "$ref": "#/components/parameters/steam_win_count_max"
          },
          {
            "$ref": "#/components/parameters/steam_medal_id"
          },
          {
            "$ref": "#/components/parameters/steam_medal_min"
          },
          {
            "$ref": "#/components/parameters/steam_medal_max"
          },
          {
            "$ref": "#/components/parameters/steam_gift"
          },
          {
            "$ref": "#/components/parameters/steam_gift_min"
          },
          {
            "$ref": "#/components/parameters/steam_gift_max"
          },
          {
            "$ref": "#/components/parameters/steam_recently_hours_min"
          },
          {
            "$ref": "#/components/parameters/steam_recently_hours_max"
          },
          {
            "$ref": "#/components/parameters/country"
          },
          {
            "$ref": "#/components/parameters/not_country"
          },
          {
            "$ref": "#/components/parameters/steam_csgo_profile_rank_min"
          },
          {
            "$ref": "#/components/parameters/steam_csgo_profile_rank_max"
          },
          {
            "$ref": "#/components/parameters/steam_solommr_min"
          },
          {
            "$ref": "#/components/parameters/steam_solommr_max"
          },
          {
            "$ref": "#/components/parameters/steam_d2_game_count_min"
          },
          {
            "$ref": "#/components/parameters/steam_d2_game_count_max"
          },
          {
            "$ref": "#/components/parameters/steam_d2_win_count_min"
          },
          {
            "$ref": "#/components/parameters/steam_d2_win_count_max"
          },
          {
            "$ref": "#/components/parameters/steam_d2_behavior_min"
          },
          {
            "$ref": "#/components/parameters/steam_d2_behavior_max"
          },
          {
            "$ref": "#/components/parameters/steam_faceit_lvl_min"
          },
          {
            "$ref": "#/components/parameters/steam_faceit_lvl_max"
          },
          {
            "$ref": "#/components/parameters/steam_points_min"
          },
          {
            "$ref": "#/components/parameters/steam_points_max"
          },
          {
            "$ref": "#/components/parameters/steam_relevant_gmin"
          },
          {
            "$ref": "#/components/parameters/steam_relevant_gmax"
          },
          {
            "$ref": "#/components/parameters/last_trans_date"
          },
          {
            "$ref": "#/components/parameters/last_trans_date_period"
          },
          {
            "$ref": "#/components/parameters/steam_last_trans_date_later"
          },
          {
            "$ref": "#/components/parameters/steam_last_trans_date_period_later"
          },
          {
            "$ref": "#/components/parameters/no_trans"
          },
          {
            "$ref": "#/components/parameters/steam_trans"
          },
          {
            "name": "has_activated_keys",
            "in": "query",
            "description": "Has activated keys.",
            "required": false,
            "schema": {
              "type": "integer",
              "enum": [
                1
              ]
            }
          },
          {
            "$ref": "#/components/parameters/steam_elo_min"
          },
          {
            "$ref": "#/components/parameters/steam_elo_max"
          },
          {
            "$ref": "#/components/parameters/steam_map_rank"
          },
          {
            "$ref": "#/components/parameters/steam_map_rmin"
          },
          {
            "$ref": "#/components/parameters/steam_map_rmax"
          },
          {
            "name": "rust_deaths_min",
            "in": "query",
            "description": "Minimum number of Rust deaths",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Minimum number of Rust deaths"
            }
          },
          {
            "name": "rust_deaths_max",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "description": "Maximum number of Rust deaths",
            "schema": {
              "type": "integer",
              "description": "Maximum number of Rust deaths"
            }
          },
          {
            "name": "rust_kills_min",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "description": "Minimum number of Rust kills",
            "schema": {
              "type": "integer",
              "description": "Minimum number of Rust kills"
            }
          },
          {
            "name": "rust_kills_max",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "description": "Maximum number of Rust kills",
            "schema": {
              "type": "integer",
              "description": "Maximum number of Rust kills"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/fortnite": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "Fortnite",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListFortnite",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/email_type",
            "schema": {
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "market",
                  "autoreg",
                  "native",
                  "no"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/temp_email"
          },
          {
            "$ref": "#/components/parameters/item_domain"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "name": "eg",
            "in": "query",
            "description": "Guarantee type.\n+ **-1** - 12 hours\n+ **0** - 24 hours\n+ **1** - 3 days\n+ **2** - Guarantee at the time of purchase",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Extended Guarantee",
              "type": "integer",
              "description": "Guarantee type.\n+ **-1** - 12 hours\n+ **0** - 24 hours\n+ **1** - 3 days\n+ **2** - Guarantee at the time of purchase",
              "enum": [
                -1,
                0,
                1,
                2
              ]
            }
          },
          {
            "$ref": "#/components/parameters/smin"
          },
          {
            "$ref": "#/components/parameters/smax"
          },
          {
            "$ref": "#/components/parameters/fortnite_vbmin"
          },
          {
            "$ref": "#/components/parameters/fortnite_vbmax"
          },
          {
            "$ref": "#/components/parameters/fortnite_skin"
          },
          {
            "$ref": "#/components/parameters/fortnite_pickaxe"
          },
          {
            "$ref": "#/components/parameters/fortnite_glider"
          },
          {
            "$ref": "#/components/parameters/fortnite_dance"
          },
          {
            "$ref": "#/components/parameters/change_email"
          },
          {
            "$ref": "#/components/parameters/fortnite_platform"
          },
          {
            "$ref": "#/components/parameters/fortnite_bp"
          },
          {
            "$ref": "#/components/parameters/lmin"
          },
          {
            "$ref": "#/components/parameters/lmax"
          },
          {
            "$ref": "#/components/parameters/fortnite_bp_lmin"
          },
          {
            "$ref": "#/components/parameters/fortnite_bp_lmax"
          },
          {
            "$ref": "#/components/parameters/last_trans_date"
          },
          {
            "$ref": "#/components/parameters/last_trans_date_period"
          },
          {
            "$ref": "#/components/parameters/no_trans"
          },
          {
            "$ref": "#/components/parameters/fortnite_xbox_linkable"
          },
          {
            "$ref": "#/components/parameters/fortnite_psn_linkable"
          },
          {
            "$ref": "#/components/parameters/daybreak"
          },
          {
            "$ref": "#/components/parameters/fortnite_rl_purchases"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/vkontakte": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "Vkontakte",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListVkontakte",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "$ref": "#/components/parameters/vk_country"
          },
          {
            "$ref": "#/components/parameters/vk_city"
          },
          {
            "$ref": "#/components/parameters/vk_friend_min"
          },
          {
            "$ref": "#/components/parameters/vk_friend_max"
          },
          {
            "$ref": "#/components/parameters/vk_follower_min"
          },
          {
            "$ref": "#/components/parameters/vk_follower_max"
          },
          {
            "$ref": "#/components/parameters/vk_vote_min"
          },
          {
            "$ref": "#/components/parameters/vk_vote_max"
          },
          {
            "$ref": "#/components/parameters/vk_sex"
          },
          {
            "$ref": "#/components/parameters/tel"
          },
          {
            "$ref": "#/components/parameters/email"
          },
          {
            "$ref": "#/components/parameters/vk_tfa"
          },
          {
            "$ref": "#/components/parameters/vk_relation"
          },
          {
            "$ref": "#/components/parameters/vk_token_auth_only"
          },
          {
            "$ref": "#/components/parameters/vk_group_follower_min"
          },
          {
            "$ref": "#/components/parameters/vk_group_follower_max"
          },
          {
            "$ref": "#/components/parameters/vk_groups_min"
          },
          {
            "$ref": "#/components/parameters/vk_groups_max"
          },
          {
            "$ref": "#/components/parameters/vk_admin_level"
          },
          {
            "$ref": "#/components/parameters/vk_min_age"
          },
          {
            "$ref": "#/components/parameters/vk_max_age"
          },
          {
            "$ref": "#/components/parameters/vk_dig_min"
          },
          {
            "$ref": "#/components/parameters/vk_dig_max"
          },
          {
            "$ref": "#/components/parameters/vk_conversations_min"
          },
          {
            "$ref": "#/components/parameters/vk_conversations_max"
          },
          {
            "$ref": "#/components/parameters/reg"
          },
          {
            "$ref": "#/components/parameters/reg_period"
          },
          {
            "$ref": "#/components/parameters/vk_mcountry"
          },
          {
            "$ref": "#/components/parameters/vk_not_mcountry"
          },
          {
            "$ref": "#/components/parameters/vk_opened_profile"
          },
          {
            "$ref": "#/components/parameters/verified"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/genshin-impact": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "Genshin Impact",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListGenshinImpact",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/email_type",
            "schema": {
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "autoreg",
                  "native",
                  "no"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/item_domain"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "$ref": "#/components/parameters/email"
          },
          {
            "$ref": "#/components/parameters/tel"
          },
          {
            "$ref": "#/components/parameters/mihoyo_character"
          },
          {
            "$ref": "#/components/parameters/mihoyo_weapon"
          },
          {
            "$ref": "#/components/parameters/genshin_region"
          },
          {
            "$ref": "#/components/parameters/mihoyo_ea"
          },
          {
            "$ref": "#/components/parameters/mihoyo_legendary_min"
          },
          {
            "$ref": "#/components/parameters/mihoyo_legendary_max"
          },
          {
            "$ref": "#/components/parameters/mihoyo_constellation_min"
          },
          {
            "$ref": "#/components/parameters/mihoyo_constellation_max"
          },
          {
            "$ref": "#/components/parameters/mihoyo_legendary_weapon_min"
          },
          {
            "$ref": "#/components/parameters/mihoyo_legendary_weapon_max"
          },
          {
            "$ref": "#/components/parameters/mihoyo_char_min"
          },
          {
            "$ref": "#/components/parameters/mihoyo_char_max"
          },
          {
            "$ref": "#/components/parameters/mihoyo_level_min"
          },
          {
            "$ref": "#/components/parameters/mihoyo_level_max"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/honkai-star-rail": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "Honkai Star Rail",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListHonkaiStarRail",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/email_type",
            "schema": {
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "autoreg",
                  "native",
                  "no"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/item_domain"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "$ref": "#/components/parameters/email"
          },
          {
            "$ref": "#/components/parameters/tel"
          },
          {
            "$ref": "#/components/parameters/mihoyo_character"
          },
          {
            "$ref": "#/components/parameters/mihoyo_weapon"
          },
          {
            "$ref": "#/components/parameters/honkai_region"
          },
          {
            "$ref": "#/components/parameters/mihoyo_ea"
          },
          {
            "$ref": "#/components/parameters/mihoyo_legendary_min"
          },
          {
            "$ref": "#/components/parameters/mihoyo_legendary_max"
          },
          {
            "$ref": "#/components/parameters/mihoyo_char_min"
          },
          {
            "$ref": "#/components/parameters/mihoyo_char_max"
          },
          {
            "$ref": "#/components/parameters/mihoyo_level_min"
          },
          {
            "$ref": "#/components/parameters/mihoyo_level_max"
          },
          {
            "$ref": "#/components/parameters/honkai_achievement_min"
          },
          {
            "$ref": "#/components/parameters/honkai_achievement_max"
          },
          {
            "$ref": "#/components/parameters/honkai_chest_min"
          },
          {
            "$ref": "#/components/parameters/honkai_chest_max"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/valorant": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "Valorant",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListValorant",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/email_type",
            "schema": {
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "autoreg",
                  "native",
                  "no"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/item_domain"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "$ref": "#/components/parameters/valorant_weaponSkin"
          },
          {
            "$ref": "#/components/parameters/valorant_knife"
          },
          {
            "$ref": "#/components/parameters/valorant_buddy"
          },
          {
            "$ref": "#/components/parameters/valorant_agent"
          },
          {
            "$ref": "#/components/parameters/country"
          },
          {
            "$ref": "#/components/parameters/not_country"
          },
          {
            "$ref": "#/components/parameters/daybreak"
          },
          {
            "$ref": "#/components/parameters/valorant_level_min"
          },
          {
            "$ref": "#/components/parameters/valorant_level_max"
          },
          {
            "$ref": "#/components/parameters/valorant_inv_min"
          },
          {
            "$ref": "#/components/parameters/valorant_inv_max"
          },
          {
            "$ref": "#/components/parameters/valorant_vp_min"
          },
          {
            "$ref": "#/components/parameters/valorant_vp_max"
          },
          {
            "$ref": "#/components/parameters/smin"
          },
          {
            "$ref": "#/components/parameters/smax"
          },
          {
            "$ref": "#/components/parameters/valorant_rmin"
          },
          {
            "$ref": "#/components/parameters/valorant_rmax"
          },
          {
            "$ref": "#/components/parameters/valorant_last_rmin"
          },
          {
            "$ref": "#/components/parameters/valorant_last_rmax"
          },
          {
            "$ref": "#/components/parameters/valorant_rank_type"
          },
          {
            "$ref": "#/components/parameters/valorant_amin"
          },
          {
            "$ref": "#/components/parameters/valorant_amax"
          },
          {
            "$ref": "#/components/parameters/valorant_region"
          },
          {
            "$ref": "#/components/parameters/valorant_not_region"
          },
          {
            "$ref": "#/components/parameters/email"
          },
          {
            "$ref": "#/components/parameters/tel"
          },
          {
            "$ref": "#/components/parameters/changeable_email"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/league-of-legends": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "League of Legends",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListLoL",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/email_type",
            "schema": {
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "autoreg",
                  "native",
                  "no"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/item_domain"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "$ref": "#/components/parameters/lol_lvl_min"
          },
          {
            "$ref": "#/components/parameters/lol_lvl_max"
          },
          {
            "$ref": "#/components/parameters/lol_winrate_min"
          },
          {
            "$ref": "#/components/parameters/lol_winrate_max"
          },
          {
            "$ref": "#/components/parameters/lol_wallet_blue_min"
          },
          {
            "$ref": "#/components/parameters/lol_wallet_blue_max"
          },
          {
            "$ref": "#/components/parameters/lol_wallet_orange_min"
          },
          {
            "$ref": "#/components/parameters/lol_wallet_orange_max"
          },
          {
            "$ref": "#/components/parameters/lol_wallet_mythic_min"
          },
          {
            "$ref": "#/components/parameters/lol_wallet_mythic_max"
          },
          {
            "$ref": "#/components/parameters/lol_wallet_riot_min"
          },
          {
            "$ref": "#/components/parameters/lol_wallet_riot_max"
          },
          {
            "$ref": "#/components/parameters/lol_skin"
          },
          {
            "$ref": "#/components/parameters/lol_champion"
          },
          {
            "$ref": "#/components/parameters/country"
          },
          {
            "$ref": "#/components/parameters/lol_region"
          },
          {
            "$ref": "#/components/parameters/daybreak"
          },
          {
            "$ref": "#/components/parameters/tel"
          },
          {
            "name": "mail",
            "in": "query",
            "description": "Has confirmed email.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Mail",
              "description": "Has confirmed email.",
              "$ref": "#/components/schemas/YesNoNoMatterScheme"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/telegram": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "Telegram",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListTelegram",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "$ref": "#/components/parameters/telegram_spam"
          },
          {
            "$ref": "#/components/parameters/telegram_password"
          },
          {
            "$ref": "#/components/parameters/premium"
          },
          {
            "$ref": "#/components/parameters/country"
          },
          {
            "$ref": "#/components/parameters/not_country"
          },
          {
            "$ref": "#/components/parameters/daybreak"
          },
          {
            "$ref": "#/components/parameters/telegram_min_channels"
          },
          {
            "$ref": "#/components/parameters/telegram_max_channels"
          },
          {
            "$ref": "#/components/parameters/telegram_min_chats"
          },
          {
            "$ref": "#/components/parameters/telegram_max_chats"
          },
          {
            "$ref": "#/components/parameters/telegram_min_conversations"
          },
          {
            "$ref": "#/components/parameters/telegram_max_conversations"
          },
          {
            "$ref": "#/components/parameters/telegram_min_admin"
          },
          {
            "$ref": "#/components/parameters/telegram_max_admin"
          },
          {
            "$ref": "#/components/parameters/telegram_min_admin_sub"
          },
          {
            "$ref": "#/components/parameters/telegram_max_admin_sub"
          },
          {
            "$ref": "#/components/parameters/telegram_dig_min"
          },
          {
            "$ref": "#/components/parameters/telegram_dig_max"
          },
          {
            "$ref": "#/components/parameters/telegram_min_contacts"
          },
          {
            "$ref": "#/components/parameters/telegram_max_contacts"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/supercell": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "Supercell",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListSupercell",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/email_type",
            "schema": {
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "autoreg",
                  "native",
                  "no"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/item_domain"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "name": "eg",
            "in": "query",
            "description": "Guarantee type.\n+ **-1** - 12 hours\n+ **0** - 24 hours\n+ **1** - 3 days\n+ **2** - Guarantee at the time of purchase",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Extended Guarantee",
              "type": "integer",
              "description": "Guarantee type.\n+ **-1** - 12 hours\n+ **0** - 24 hours\n+ **1** - 3 days\n+ **2** - Guarantee at the time of purchase",
              "enum": [
                -1,
                0,
                1,
                2
              ]
            }
          },
          {
            "$ref": "#/components/parameters/supercell_system"
          },
          {
            "$ref": "#/components/parameters/lmin"
          },
          {
            "$ref": "#/components/parameters/lmax"
          },
          {
            "$ref": "#/components/parameters/supercell_cup_min"
          },
          {
            "$ref": "#/components/parameters/supercell_cup_max"
          },
          {
            "$ref": "#/components/parameters/supercell_brawlers_min"
          },
          {
            "$ref": "#/components/parameters/supercell_brawlers_max"
          },
          {
            "$ref": "#/components/parameters/supercell_brawler"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/origin": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "Origin",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListOrigin",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/email_type",
            "schema": {
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "autoreg",
                  "native",
                  "no"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/item_domain"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "$ref": "#/components/parameters/game_int"
          },
          {
            "$ref": "#/components/parameters/country"
          },
          {
            "$ref": "#/components/parameters/not_country"
          },
          {
            "$ref": "#/components/parameters/origin_al_rank_group"
          },
          {
            "$ref": "#/components/parameters/origin_al_level_min"
          },
          {
            "$ref": "#/components/parameters/origin_al_level_max"
          },
          {
            "$ref": "#/components/parameters/origin_xbox_connected"
          },
          {
            "$ref": "#/components/parameters/origin_steam_connected"
          },
          {
            "$ref": "#/components/parameters/origin_subscription"
          },
          {
            "$ref": "#/components/parameters/subscription_length"
          },
          {
            "$ref": "#/components/parameters/subscription_period"
          },
          {
            "$ref": "#/components/parameters/daybreak"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/world-of-tanks": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "World of Tanks",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListWoT",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/email_type",
            "schema": {
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "autoreg",
                  "native",
                  "no"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/item_domain"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "$ref": "#/components/parameters/tel"
          },
          {
            "$ref": "#/components/parameters/daybreak"
          },
          {
            "$ref": "#/components/parameters/wargaming_battles_min"
          },
          {
            "$ref": "#/components/parameters/wargaming_battles_max"
          },
          {
            "$ref": "#/components/parameters/wargaming_gold_min"
          },
          {
            "$ref": "#/components/parameters/wargaming_gold_max"
          },
          {
            "$ref": "#/components/parameters/wargaming_silver_min"
          },
          {
            "$ref": "#/components/parameters/wargaming_silver_max"
          },
          {
            "$ref": "#/components/parameters/wargaming_top_min"
          },
          {
            "$ref": "#/components/parameters/wargaming_top_max"
          },
          {
            "$ref": "#/components/parameters/wargaming_prem_min"
          },
          {
            "$ref": "#/components/parameters/wargaming_prem_max"
          },
          {
            "$ref": "#/components/parameters/wargaming_top_prem_min"
          },
          {
            "$ref": "#/components/parameters/wargaming_top_prem_max"
          },
          {
            "$ref": "#/components/parameters/wargaming_win_pmin"
          },
          {
            "$ref": "#/components/parameters/wargaming_win_pmax"
          },
          {
            "$ref": "#/components/parameters/wargaming_tank"
          },
          {
            "$ref": "#/components/parameters/wargaming_region"
          },
          {
            "$ref": "#/components/parameters/wargaming_not_region"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/wot-blitz": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "WoT Blitz",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListWoTBlitz",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/email_type",
            "schema": {
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "autoreg",
                  "native",
                  "no"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/item_domain"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "$ref": "#/components/parameters/tel"
          },
          {
            "$ref": "#/components/parameters/daybreak"
          },
          {
            "$ref": "#/components/parameters/wargaming_battles_min"
          },
          {
            "$ref": "#/components/parameters/wargaming_battles_max"
          },
          {
            "$ref": "#/components/parameters/wargaming_gold_min"
          },
          {
            "$ref": "#/components/parameters/wargaming_gold_max"
          },
          {
            "$ref": "#/components/parameters/wargaming_silver_min"
          },
          {
            "$ref": "#/components/parameters/wargaming_silver_max"
          },
          {
            "$ref": "#/components/parameters/wargaming_top_min"
          },
          {
            "$ref": "#/components/parameters/wargaming_top_max"
          },
          {
            "$ref": "#/components/parameters/wargaming_prem_min"
          },
          {
            "$ref": "#/components/parameters/wargaming_prem_max"
          },
          {
            "$ref": "#/components/parameters/wargaming_top_prem_min"
          },
          {
            "$ref": "#/components/parameters/wargaming_top_prem_max"
          },
          {
            "$ref": "#/components/parameters/wargaming_win_pmin"
          },
          {
            "$ref": "#/components/parameters/wargaming_win_pmax"
          },
          {
            "$ref": "#/components/parameters/wargaming_tank"
          },
          {
            "$ref": "#/components/parameters/wargaming_region"
          },
          {
            "$ref": "#/components/parameters/wargaming_not_region"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/epicgames": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "Epic Games",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListEpicGames",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/email_type",
            "schema": {
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "market",
                  "autoreg",
                  "native",
                  "no"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/item_domain"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "name": "eg",
            "in": "query",
            "description": "Guarantee type.\n+ **-1** - 12 hours\n+ **0** - 24 hours\n+ **1** - 3 days\n+ **2** - Guarantee at the time of purchase",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Extended Guarantee",
              "type": "integer",
              "description": "Guarantee type.\n+ **-1** - 12 hours\n+ **0** - 24 hours\n+ **1** - 3 days\n+ **2** - Guarantee at the time of purchase",
              "enum": [
                -1,
                0,
                1,
                2
              ]
            }
          },
          {
            "$ref": "#/components/parameters/game"
          },
          {
            "$ref": "#/components/parameters/change_email"
          },
          {
            "$ref": "#/components/parameters/fortnite_rl_purchases"
          },
          {
            "$ref": "#/components/parameters/epicgames_sc"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/escape-from-tarkov": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "Escape from Tarkov",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListEscapeFromTarkov",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/email_type",
            "schema": {
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "autoreg",
                  "native",
                  "no"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/item_domain"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "$ref": "#/components/parameters/eft_region"
          },
          {
            "$ref": "#/components/parameters/eft_version"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/socialclub": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "Social Club",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListSocialClub",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "$ref": "#/components/parameters/sc_rdr2"
          },
          {
            "$ref": "#/components/parameters/sc_gtav"
          },
          {
            "$ref": "#/components/parameters/daybreak"
          },
          {
            "name": "level_min",
            "in": "query",
            "description": "Minimum number of Social Club level.",
            "schema": {
              "type": "integer",
              "description": "Minimum number of Social Club level."
            }
          },
          {
            "name": "level_max",
            "in": "query",
            "description": "Maximum number of Social Club level.",
            "schema": {
              "type": "integer",
              "description": "Maximum number of Social Club level."
            }
          },
          {
            "name": "cash_min",
            "in": "query",
            "description": "Minimum number of GTA V cash",
            "schema": {
              "type": "integer",
              "description": "inimum number of GTA V cash"
            }
          },
          {
            "name": "cash_max",
            "in": "query",
            "description": "Maximum number of GTA V cash",
            "schema": {
              "type": "integer",
              "description": "Maximum number of GTA V cash"
            }
          },
          {
            "name": "bank_cash_min",
            "in": "query",
            "description": "Minimum number of GTA V bank cash",
            "schema": {
              "type": "integer",
              "description": "Minimum number of GTA V bank cash"
            }
          },
          {
            "name": "bank_cash_max",
            "in": "query",
            "description": "Maximum number of GTA V bank cash",
            "schema": {
              "type": "integer",
              "description": "Maximum number of GTA V bank cash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/uplay": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "Uplay",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListUplay",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/email_type",
            "schema": {
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "autoreg",
                  "native",
                  "no"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/item_domain"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "$ref": "#/components/parameters/game_int"
          },
          {
            "$ref": "#/components/parameters/country"
          },
          {
            "$ref": "#/components/parameters/not_country"
          },
          {
            "$ref": "#/components/parameters/daybreak"
          },
          {
            "$ref": "#/components/parameters/uplay_r6_level_min"
          },
          {
            "$ref": "#/components/parameters/uplay_r6_level_max"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/war-thunder": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "War Thunder",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListWarThunder",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/email_type",
            "schema": {
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "autoreg",
                  "native",
                  "no"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/item_domain"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "$ref": "#/components/parameters/daybreak"
          },
          {
            "$ref": "#/components/parameters/wargaming_gold_min"
          },
          {
            "$ref": "#/components/parameters/wargaming_gold_max"
          },
          {
            "$ref": "#/components/parameters/wargaming_silver_min"
          },
          {
            "$ref": "#/components/parameters/wargaming_silver_max"
          },
          {
            "$ref": "#/components/parameters/rank_min"
          },
          {
            "$ref": "#/components/parameters/rank_max"
          },
          {
            "$ref": "#/components/parameters/warthunder_eliteUnits_min"
          },
          {
            "$ref": "#/components/parameters/warthunder_eliteUnits_max"
          },
          {
            "$ref": "#/components/parameters/warthunder_played_min"
          },
          {
            "$ref": "#/components/parameters/warthunder_played_max"
          },
          {
            "$ref": "#/components/parameters/warthunder_wins_min"
          },
          {
            "$ref": "#/components/parameters/warthunder_wins_max"
          },
          {
            "$ref": "#/components/parameters/warthunder_phone_verified"
          },
          {
            "$ref": "#/components/parameters/warthunder_email_verified"
          },
          {
            "$ref": "#/components/parameters/premium"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/discord": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "Discord",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListDiscord",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/email_type",
            "schema": {
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "autoreg",
                  "native",
                  "no"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/item_domain"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "$ref": "#/components/parameters/tel"
          },
          {
            "$ref": "#/components/parameters/discord_nitro"
          },
          {
            "$ref": "#/components/parameters/discord_billing"
          },
          {
            "$ref": "#/components/parameters/discord_gifts"
          },
          {
            "$ref": "#/components/parameters/discord_quarantined"
          },
          {
            "$ref": "#/components/parameters/discord_condition"
          },
          {
            "$ref": "#/components/parameters/discord_chat_min"
          },
          {
            "$ref": "#/components/parameters/discord_chat_max"
          },
          {
            "$ref": "#/components/parameters/reg"
          },
          {
            "$ref": "#/components/parameters/reg_period"
          },
          {
            "$ref": "#/components/parameters/discord_locale"
          },
          {
            "$ref": "#/components/parameters/discord_not_locale"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/tiktok": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "TikTok",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListTikTok",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/email_type",
            "schema": {
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "autoreg",
                  "native",
                  "no"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/item_domain"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "$ref": "#/components/parameters/tel"
          },
          {
            "$ref": "#/components/parameters/fmin"
          },
          {
            "$ref": "#/components/parameters/fmax"
          },
          {
            "$ref": "#/components/parameters/post_min"
          },
          {
            "$ref": "#/components/parameters/post_max"
          },
          {
            "$ref": "#/components/parameters/tiktok_like_min"
          },
          {
            "$ref": "#/components/parameters/tiktok_like_max"
          },
          {
            "$ref": "#/components/parameters/tiktok_cookie_login"
          },
          {
            "$ref": "#/components/parameters/tiktok_verified"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/instagram": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "Instagram",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListInstagram",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/email_type",
            "schema": {
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "autoreg",
                  "native",
                  "no"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/item_domain"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "$ref": "#/components/parameters/tel"
          },
          {
            "$ref": "#/components/parameters/country"
          },
          {
            "$ref": "#/components/parameters/not_country"
          },
          {
            "$ref": "#/components/parameters/cookies"
          },
          {
            "$ref": "#/components/parameters/instagram_login_without_cookies"
          },
          {
            "$ref": "#/components/parameters/fmin"
          },
          {
            "$ref": "#/components/parameters/fmax"
          },
          {
            "$ref": "#/components/parameters/post_min"
          },
          {
            "$ref": "#/components/parameters/post_max"
          },
          {
            "$ref": "#/components/parameters/reg"
          },
          {
            "$ref": "#/components/parameters/reg_period"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/battlenet": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "BattleNet",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListBattleNet",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/email_type",
            "schema": {
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "native",
                  "no"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/item_domain"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "name": "eg",
            "in": "query",
            "description": "Guarantee type.\n+ **-1** - 12 hours\n+ **0** - 24 hours\n+ **1** - 3 days\n+ **2** - Guarantee at the time of purchase",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Extended Guarantee",
              "type": "integer",
              "description": "Guarantee type.\n+ **0** - 24 hours\n+ **1** - 3 days",
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "$ref": "#/components/parameters/game_int"
          },
          {
            "$ref": "#/components/parameters/daybreak"
          },
          {
            "$ref": "#/components/parameters/country"
          },
          {
            "$ref": "#/components/parameters/not_country"
          },
          {
            "$ref": "#/components/parameters/tel"
          },
          {
            "$ref": "#/components/parameters/battlenet_edit_btag"
          },
          {
            "$ref": "#/components/parameters/battlenet_changeable_fn"
          },
          {
            "$ref": "#/components/parameters/battlenet_real_id"
          },
          {
            "$ref": "#/components/parameters/battlenet_parent_control"
          },
          {
            "$ref": "#/components/parameters/lmin"
          },
          {
            "$ref": "#/components/parameters/lmax"
          },
          {
            "$ref": "#/components/parameters/balance_min"
          },
          {
            "$ref": "#/components/parameters/balance_max"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/vpn": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "VPN",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListVpn",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "$ref": "#/components/parameters/vpn_service_id"
          },
          {
            "$ref": "#/components/parameters/subscription_length"
          },
          {
            "$ref": "#/components/parameters/subscription_period"
          },
          {
            "$ref": "#/components/parameters/vpn_renewable"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/cinema": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "Cinema",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListCinema",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "$ref": "#/components/parameters/cinema_service_id"
          },
          {
            "$ref": "#/components/parameters/subscription_length"
          },
          {
            "$ref": "#/components/parameters/subscription_period"
          },
          {
            "$ref": "#/components/parameters/cinema_autorenewal"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/spotify": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "Spotify",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListSpotify",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "$ref": "#/components/parameters/country"
          },
          {
            "$ref": "#/components/parameters/not_country"
          },
          {
            "$ref": "#/components/parameters/spotify_family"
          },
          {
            "$ref": "#/components/parameters/spotify_family_manager"
          },
          {
            "$ref": "#/components/parameters/spotify_family_member_count_min"
          },
          {
            "$ref": "#/components/parameters/spotify_family_member_count_max"
          },
          {
            "$ref": "#/components/parameters/subscription_length"
          },
          {
            "$ref": "#/components/parameters/subscription_period"
          },
          {
            "$ref": "#/components/parameters/spotify_recurring"
          },
          {
            "$ref": "#/components/parameters/spotify_trial"
          },
          {
            "$ref": "#/components/parameters/spotify_plan_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/warface": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "Warface",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListWarface",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "$ref": "#/components/parameters/rank_min"
          },
          {
            "$ref": "#/components/parameters/rank_max"
          },
          {
            "$ref": "#/components/parameters/warface_bonus_rank_min"
          },
          {
            "$ref": "#/components/parameters/warface_bonus_rank_max"
          },
          {
            "$ref": "#/components/parameters/tel"
          },
          {
            "$ref": "#/components/parameters/daybreak"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/youtube": {
      "get": {
        "tags": [
          "Category Search"
        ],
        "summary": "Youtube",
        "description": "Displays a list of accounts in a specific category according to your parameters.",
        "operationId": "accountsList.getListYoutube",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          },
          {
            "$ref": "#/components/parameters/youtube_brand"
          },
          {
            "$ref": "#/components/parameters/youtube_monetization"
          },
          {
            "$ref": "#/components/parameters/youtube_artist"
          },
          {
            "$ref": "#/components/parameters/verified"
          },
          {
            "$ref": "#/components/parameters/youtube_password"
          },
          {
            "$ref": "#/components/parameters/youtube_subscribes_min"
          },
          {
            "$ref": "#/components/parameters/youtube_subscribes_max"
          },
          {
            "$ref": "#/components/parameters/youtube_viewcount_min"
          },
          {
            "$ref": "#/components/parameters/youtube_viewcount_max"
          },
          {
            "$ref": "#/components/parameters/youtube_videocount_min"
          },
          {
            "$ref": "#/components/parameters/youtube_videocount_max"
          },
          {
            "$ref": "#/components/parameters/reg"
          },
          {
            "$ref": "#/components/parameters/reg_period"
          },
          {
            "$ref": "#/components/parameters/youtube_locale"
          },
          {
            "$ref": "#/components/parameters/youtube_not_locale"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/category": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get Categories",
        "description": "Display category list.",
        "operationId": "accountsPublishing.getCategories",
        "parameters": [
          {
            "name": "top_queries",
            "in": "query",
            "description": "Display top queries for per category.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Top Queries",
              "type": "boolean",
              "description": "Display top queries for per category."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Categories"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{categoryName}/params": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get Category Search Params",
        "description": "Displays search parameters for a category.",
        "operationId": "accountsList.getSearchCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/categoryName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryModel"
                }
              }
            }
          },
          "404": {
            "description": "Error Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageNotFoundModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{categoryName}/games": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get Category Games",
        "description": "Displays a list of games in the category.",
        "operationId": "accountsList.getGamesCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/categoryName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GamesModel"
                }
              }
            }
          },
          "404": {
            "description": "Error Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageNotFoundModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/user/items": {
      "get": {
        "tags": [
          "Accounts list"
        ],
        "summary": "Get All Owned Accounts",
        "description": "Displays a list of owned accounts.",
        "operationId": "accountsList.getOwned",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "User id.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "User id",
              "type": "integer",
              "description": "User id."
            }
          },
          {
            "$ref": "#/components/parameters/category_id"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/show"
          },
          {
            "$ref": "#/components/parameters/delete_reason"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "name": "login",
            "style": "form",
            "required": false,
            "in": "query",
            "description": "Login.",
            "explode": true,
            "schema": {
              "title": "Login",
              "type": "string",
              "description": "Login."
            }
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Order By",
              "description": "Order by.",
              "type": "string",
              "enum": [
                "price_to_up",
                "price_to_down",
                "pdate_to_down",
                "pdate_to_down_upload",
                "pdate_to_up",
                "pdate_to_up_upload",
                "exp_auctions",
                "ddate_to_up",
                "ddate_to_down"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/user/orders": {
      "get": {
        "tags": [
          "Accounts list"
        ],
        "summary": "Get All Purchased Accounts",
        "description": "Displays a list of purchased accounts.",
        "operationId": "accountsList.getPurchased",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "User id.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "User id",
              "type": "integer",
              "description": "User id."
            }
          },
          {
            "$ref": "#/components/parameters/category_id"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/show"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "name": "login",
            "style": "form",
            "required": false,
            "in": "query",
            "description": "Login.",
            "explode": true,
            "schema": {
              "title": "Login",
              "type": "string",
              "description": "Login."
            }
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/NoPermissionModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/fave": {
      "get": {
        "tags": [
          "Accounts list"
        ],
        "summary": "Get All Favourites Accounts",
        "description": "Displays a list of favourites accounts.",
        "operationId": "accountsList.getFavorite",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/show"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/viewed": {
      "get": {
        "tags": [
          "Accounts list"
        ],
        "summary": "Get All Viewed Accounts",
        "description": "Displays a list of viewed accounts.",
        "operationId": "accountsList.getViewed",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/show"
          },
          {
            "$ref": "#/components/parameters/auction"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/not_origin"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sb_by_me"
          },
          {
            "$ref": "#/components/parameters/nsb"
          },
          {
            "$ref": "#/components/parameters/nsb_by_me"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}": {
      "get": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Get Account",
        "description": "Displays account information.\n\n> Rate Limit (1 request / 3 seconds) does not apply to this method.",
        "operationId": "accountsList.getInformation",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsModel"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Delete Account",
        "description": "Deletes your account from public search. Deletion type is soft. You can restore account after deletion if you want.",
        "operationId": "accountsManaging.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          },
          {
            "name": "reason",
            "in": "query",
            "description": "Delete reason.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Reason",
              "type": "string",
              "description": "Delete reason."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkModel"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/NoPermissionModel"
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/steam-value": {
      "get": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Get Steam Inventory Value",
        "description": "Gets steam inventory value.",
        "operationId": "accountsManaging.getSteamInventoryValue",
        "parameters": [
          {
            "name": "link",
            "in": "query",
            "description": "Link or id of account. Can be [**https://lzt.market/{item-id}/**, **https://steamcommunity.com/id/{steam-name}**, **https://steamcommunity.com/profiles/{steam-id}**, **{steam-id}**].",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Link",
              "type": "string",
              "description": "Link or id of account. Can be [**https://lzt.market/{item-id}/**, **https://steamcommunity.com/id/{steam-name}**, **https://steamcommunity.com/profiles/{steam-id}**, **{steam-id}**]."
            }
          },
          {
            "$ref": "#/components/parameters/app_id"
          },
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "name": "ignore_cache",
            "in": "query",
            "description": "Ignore cache.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Ignore Cache",
              "type": "boolean",
              "description": "Ignore cache."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SteamValueModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/steam-preview": {
      "get": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Get Steam HTML",
        "description": "Returns Steam account html code.",
        "operationId": "accountsList.getSteamHtml",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Type",
              "type": "string",
              "description": "Type of page.",
              "enum": [
                "profiles",
                "games"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "description": "Steam account html code."
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/NoPermissionModel"
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/edit": {
      "put": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Edit Account",
        "description": "Edits any details of account.\n\nAccount origin. Where did you get it from.\n+ brute - Account received using Bruteforce\n+ fishing - Account received from fishing page\n+ stealer - Account received from stealer logs\n+ autoreg - Account is automatically registered by a tool\n+ personal - Account is yours. You created it yourself\n+ resale - Account received from another seller\n+ retrive - Account is recovered by email or phone (only for VKontakte category)\n+ dummy - Dummy (empty) account (only for Steam category)",
        "operationId": "accountsManaging.edit",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          },
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "name": "title_en",
            "in": "query",
            "description": "English title of account. If **title_en** specified and **title** is empty, **title** will be automatically translated to Russian language.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Title En",
              "type": "string",
              "description": "English title of account. If **title_en** specified and **title** is empty, **title** will be automatically translated to Russian language."
            }
          },
          {
            "name": "price",
            "in": "query",
            "required": false,
            "description": "Current price of account in your currency.",
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Price",
              "type": "integer",
              "description": "Current price of account in your currency.",
              "minimum": 1
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "Using currency for amount. Required if you are trying to change price field.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/CurrencyModel"
            }
          },
          {
            "name": "item_origin",
            "in": "query",
            "description": "Account origin. Where did you get it from.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Item Origin",
              "type": "string",
              "description": "Account origin. Where did you get it from.",
              "enum": [
                "brute",
                "fishing",
                "stealer",
                "personal",
                "resale",
                "autoreg",
                "dummy"
              ]
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Account public description.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Description",
              "type": "string",
              "description": "Account public description."
            }
          },
          {
            "name": "information",
            "in": "query",
            "description": "Account private information (visible for buyer only if purchased).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Information",
              "type": "string",
              "description": "Account private information (visible for buyer only if purchased)."
            }
          },
          {
            "name": "email_login_data",
            "in": "query",
            "description": "Email login data (email:password format).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Email Login Data",
              "type": "string",
              "description": "Email login data (email:password format)."
            }
          },
          {
            "name": "email_type",
            "in": "query",
            "description": "Email type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Email Type",
              "type": "string",
              "description": "Email type.",
              "enum": [
                "native",
                "autoreg"
              ]
            }
          },
          {
            "name": "allow_ask_discount",
            "in": "query",
            "description": "Allow users to ask discount for this account.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Allow Ask Discount",
              "type": "boolean",
              "description": "Allow users to ask discount for this account."
            }
          },
          {
            "name": "proxy_id",
            "in": "query",
            "description": "Using proxy id for account checking. See GET or POST /proxy to get or edit proxy list.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Proxy Id",
              "type": "integer",
              "description": "Using proxy id for account checking. See GET or POST /proxy to get or edit proxy list."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveChangesModel"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/NoPermissionModel"
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/update-inventory": {
      "post": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Update Inventory Value",
        "description": "Update inventory value.",
        "operationId": "accountsManaging.updateInventoryValue",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          },
          {
            "$ref": "#/components/parameters/app_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdateInventoryValue_200"
          },
          "403": {
            "$ref": "#/components/responses/NoPermissionModel"
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/bump": {
      "post": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Bump Account",
        "description": "Bumps account in the search.",
        "operationId": "accountsManaging.bump",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkModel"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/NoPermissionModel"
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/auction": {
      "get": {
        "tags": [
          "Auction"
        ],
        "summary": "Get Auction",
        "description": "Display a list of bids in the auction.",
        "operationId": "auction.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuctionModel"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/auction/bid": {
      "post": {
        "tags": [
          "Auction"
        ],
        "summary": "Place Bid",
        "description": "Create a new auction bid.",
        "operationId": "auction.placeBid",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          },
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/amount"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuctionBidNewModel"
                }
              }
            }
          },
          "403": {
            "description": "Error Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuctionErrorLastBidModel"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Auction"
        ],
        "summary": "Delete Bid",
        "description": "Delete your auction bid. You can delete your auction bid within 5 minutes.",
        "operationId": "auction.deleteBid",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          },
          {
            "$ref": "#/components/parameters/bidId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuctionBidDeleteModel"
                }
              }
            }
          },
          "403": {
            "description": "Error Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuctionErrorTimeExpiredModel"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/fast-buy": {
      "post": {
        "tags": [
          "Account purchasing"
        ],
        "summary": "Fast Buy Account",
        "description": "Check and buy account.",
        "operationId": "accountsPurchasing.checkBuy",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          },
          {
            "$ref": "#/components/parameters/price"
          },
          {
            "name": "buy_without_validation",
            "in": "query",
            "description": "Put **1** if you want to buy account without account data validation (not safe).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Buy Without Validation",
              "type": "integer",
              "enum": [
                1
              ],
              "description": "Put **1** if you want to buy account without account data validation (not safe)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastBuyModel"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/ErrorModel"
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/check-account": {
      "post": {
        "tags": [
          "Account purchasing"
        ],
        "summary": "Check Account",
        "description": "Checking account for validity. If the account is invalid, the purchase will be canceled automatically (you don't need to make request **POST /:itemId/cancel-reserve**).",
        "operationId": "accountsPurchasing.check",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAccBuyModel"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/ErrorModel"
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/confirm-buy": {
      "post": {
        "tags": [
          "Account purchasing"
        ],
        "summary": "Confirm Buy",
        "description": "Confirm buy.",
        "operationId": "accountsPurchasing.confirmBuy",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          },
          {
            "name": "buy_without_validation",
            "in": "query",
            "description": "Put **1** if you want to buy account without account data validation (not safe).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Buy Without Validation",
              "type": "integer",
              "description": "Put **1** if you want to buy account without account data validation (not safe).",
              "enum": [
                1
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfirmBuyModel"
                }
              }
            }
          },
          "403": {
            "description": "Error Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SoldItemModel"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/reserve": {
      "post": {
        "tags": [
          "Account purchasing"
        ],
        "summary": "Reserve Account",
        "description": "Reserves account for you. Reserve time - 300 seconds.",
        "operationId": "accountsPurchasing.setReserve",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          },
          {
            "$ref": "#/components/parameters/price"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReserveBuyModel"
                }
              }
            }
          },
          "403": {
            "description": "Error Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SoldItemModel"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/cancel-reserve": {
      "post": {
        "tags": [
          "Account purchasing"
        ],
        "summary": "Unreserve Account",
        "description": "Cancels reserve.",
        "operationId": "accountsPurchasing.cancelReserve",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveChangesModel"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/NoPermissionModel"
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/item/fast-sell": {
      "post": {
        "tags": [
          "Account publishing"
        ],
        "summary": "Fast Sell Account",
        "description": "Adds and check account on validity. If account is valid, account will be published on the market.\n\n**If you receive a \"captcha\" error, that you should send same request again.**\n\n> Rate Limit (1 request / 3 seconds) does not apply to this method.\n\nAccount origin. Where did you get it from.\n+ brute - Account received using Bruteforce\n+ fishing - Account received from fishing page\n+ stealer - Account received from stealer logs\n+ autoreg - Account is automatically registered by a tool\n+ personal - Account is yours. You created it yourself\n+ resale - Account received from another seller\n+ retrive - Account is recovered by email or phone (only for VKontakte category)\n+ dummy - Dummy (empty) account (only for Steam category)\n\nRequired email login data categories:\n+ 9 - Fortnite\n+ 12 - Epic games\n+ 18 - Escape from Tarkov",
        "operationId": "accountPublishing.fastSell",
        "parameters": [
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "name": "title_en",
            "in": "query",
            "description": "English title of account. If **title_en** specified and **title** is empty, **title** will be automatically translated to Russian language.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Title En",
              "type": "string",
              "description": "English title of account. If **title_en** specified and **title** is empty, **title** will be automatically translated to Russian language."
            }
          },
          {
            "$ref": "#/components/parameters/price"
          },
          {
            "name": "type_sell",
            "in": "query",
            "description": "Sales method. If this parameter is not set, **type_sell** will be **price**.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Type Sell",
              "type": "string",
              "description": "Sales method.",
              "enum": [
                "price",
                "auction"
              ]
            }
          },
          {
            "name": "duration_auction_value",
            "in": "query",
            "description": "Duration auction value. At the end of the auction time, the item will be closed if there were no bids.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Duration Auction Value",
              "type": "integer",
              "description": "Duration auction value. At the end of the auction time, the item will be closed if there were no bids.",
              "minimum": 1
            }
          },
          {
            "name": "duration_auction_option",
            "in": "query",
            "description": "Duration auction option.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Duration Auction Option",
              "type": "string",
              "description": "Duration auction option.",
              "enum": [
                "minutes",
                "hours",
                "days"
              ]
            }
          },
          {
            "name": "instant_price",
            "in": "query",
            "description": "The price for which you can instantly redeem your account.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Instant Price",
              "type": "integer",
              "description": "The price for which you can instantly redeem your account.",
              "minimum": 1
            }
          },
          {
            "name": "not_bids_action",
            "in": "query",
            "description": "If you set **cancel**, at the end of the auction with 0 bids, the account can be purchased at the price you specified as the minimum bid.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Not Bids Action",
              "type": "string",
              "description": "If you set **cancel**, at the end of the auction with 0 bids, the account can be purchased at the price you specified as the minimum bid.",
              "enum": [
                "close",
                "cancel"
              ]
            }
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "Accounts category.\n+ 1 - Steam\n+ 2 - VK\n+ 3 - Origin\n+ 4 - Warface\n+ 5 - Uplay\n+ 7 - Social Club\n+ 9 - Fortnite\n+ 10 - Instagram\n+ 11 - Battlenet\n+ 12 - Epic Games\n+ 13 - Valorant\n+ 14 - World Of Tanks\n+ 16 - WOT Blitz\n+ 15 - Supercell\n+ 17 - Genshin Impact\n+ 18 - Escape From Tarkov\n+ 19 - VPN\n+ 20 - Tiktok\n+ 22 - Discord\n+ 23 - Cinema\n+ 24 - Telegram\n+ 25 - Youtube\n+ 26 - Spotify\n+ 27 - War Thunder",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/CategoryIdModel"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "Using currency.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/CurrencyModel"
            }
          },
          {
            "name": "item_origin",
            "in": "query",
            "description": "Account origin. Where did you get it from.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "description": "Account origin. Where did you get it from.",
              "type": "string",
              "enum": [
                "brute",
                "fishing",
                "stealer",
                "personal",
                "resale",
                "autoreg",
                "dummy"
              ]
            }
          },
          {
            "name": "extended_guarantee",
            "in": "query",
            "description": "Guarantee type.\n+ **-1** - 12 hours\n+ **0** - 24 hours\n+ **1** - 3 days",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Extended Guarantee",
              "type": "integer",
              "description": "Guarantee type.\n+ **-1** - 12 hours\n+ **0** - 24 hours\n+ **1** - 3 days",
              "enum": [
                -1,
                0,
                1
              ]
            }
          },
          {
            "name": "allow_ask_discount",
            "in": "query",
            "description": "Allow users to ask discount for this account.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Allow Ask Discount",
              "type": "boolean",
              "description": "Allow users to ask discount for this account."
            }
          },
          {
            "name": "proxy_id",
            "in": "query",
            "description": "Using proxy id for account checking.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Proxy Id",
              "type": "integer",
              "description": "Using proxy id for account checking."
            }
          },
          {
            "name": "random_proxy",
            "in": "query",
            "description": "Pass 1, if you get captcha in previous response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Random Proxy",
              "type": "integer",
              "description": "Pass 1, if you get captcha in previous response.",
              "enum": [
                1
              ]
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "Account public description.",
                    "title": "Description",
                    "type": "string"
                  },
                  "information": {
                    "description": "Account private information (visible for buyer only if purchased).",
                    "title": "Information",
                    "type": "string"
                  },
                  "login": {
                    "description": "Account login (or email).",
                    "title": "Login",
                    "type": "string"
                  },
                  "password": {
                    "description": "Account password.",
                    "title": "Password",
                    "type": "string"
                  },
                  "login_password": {
                    "description": "Account login data (login:password format).",
                    "title": "Login Password",
                    "type": "string"
                  },
                  "has_email_login_data": {
                    "description": "Required if a **category** is one of list of Required email login data categories.",
                    "title": "Has Email Login Data",
                    "type": "boolean"
                  },
                  "email_login_data": {
                    "description": "Required if a **category** is one of list of Required email login data categories. Email login data (email:password format).",
                    "title": "Email Login Data",
                    "type": "string"
                  },
                  "email_type": {
                    "description": "Email type.",
                    "title": "Email Type",
                    "type": "string",
                    "enum": [
                      "native",
                      "autoreg"
                    ]
                  },
                  "close_item": {
                    "description": "If set, the item will be closed **item_state = closed**.",
                    "title": "Close Item",
                    "type": "boolean"
                  },
                  "extra[region]": {
                    "description": "Region. Required if you want to upload WoT, Valorant, Escape From Tarkov account. Optional if you want to upload Genshin Impact account.",
                    "title": "Region",
                    "type": "string"
                  },
                  "extra[service_id]": {
                    "description": "Service id. Required if you want to upload VPN, Cinema account.",
                    "title": "Service Id",
                    "type": "string",
                    "enum": [
                      "AdguardVPN",
                      "PIAVPN",
                      "cyberghostVPN",
                      "pureVPN",
                      "ultraVPN",
                      "vanishVPN",
                      "windscribeVPN",
                      "zenmateVPN",
                      "zenmateVPNUltimate",
                      "start"
                    ]
                  },
                  "extra[system]": {
                    "description": "System. Required if you want to upload Supercell account.",
                    "title": "System",
                    "type": "string",
                    "enum": [
                      "laser",
                      "scroll",
                      "magic"
                    ]
                  },
                  "extra[ds_token]": {
                    "description": "Discord token. Required if you want to upload Discord account.",
                    "title": "Discord Token",
                    "type": "string"
                  },
                  "extra[vk_token]": {
                    "description": "VK token. Required if you want to upload VK account.",
                    "title": "VK Token",
                    "type": "string"
                  },
                  "extra[vk_ua]": {
                    "description": "VK User-agent. Optional. Used only if you want to upload VK account.",
                    "title": "VK Token",
                    "type": "string"
                  },
                  "extra[vk_token_auth_only]": {
                    "description": "Login into account by token only. Used only if you want to upload VK account.",
                    "title": "Vk Token Auth Only",
                    "type": "integer",
                    "enum": [
                      1
                    ]
                  },
                  "extra[parse_vote_count]": {
                    "description": "Parse VK balance.",
                    "title": "Parse VK balance",
                    "type": "integer",
                    "enum": [
                      1
                    ]
                  },
                  "extra[cookies]": {
                    "description": "Cookies. Required if you want to upload Youtube, Fortnite, Epic Games, Origin (EA), Social Club, Instagram, TikTok or Warface account.",
                    "title": "Cookies",
                    "type": "string"
                  },
                  "extra[sc]": {
                    "description": "Required if you want to upload Epic Games account.",
                    "title": "sc",
                    "type": "integer",
                    "enum": [
                      1,
                      0
                    ]
                  },
                  "extra[ItTakesTwo]": {
                    "description": "Required if you want to upload Origin (EA) account.",
                    "title": "ItTakesTwo",
                    "type": "integer",
                    "enum": [
                      1,
                      0
                    ]
                  },
                  "extra[apex_legends]": {
                    "description": "Required if you want to upload Origin (EA) account.",
                    "title": "ApexLegends",
                    "type": "integer",
                    "enum": [
                      1,
                      0
                    ]
                  },
                  "extra[login_without_cookies]": {
                    "description": "Login without cookies. Required if you want to upload Instagram account.",
                    "title": "Login Without Cookies",
                    "type": "boolean"
                  },
                  "extra[mfa_file]": {
                    "description": "Mfa file. Optional. Used only if you want to upload Steam account.",
                    "title": "Mfa File",
                    "type": "string"
                  },
                  "extra[dota2_mmr]": {
                    "description": "Dota 2 MMR. Optional. Used only if you want to upload Steam account.",
                    "title": "Dota 2 MMR",
                    "type": "string"
                  },
                  "extra[ea_games]": {
                    "description": "EA Games. Optional. Used only if you want to upload Steam account.",
                    "title": "EA Games",
                    "type": "boolean"
                  },
                  "extra[uplay_games]": {
                    "description": "Uplay Games. Optional. Used only if you want to upload Steam account.",
                    "title": "Uplay Games",
                    "type": "string"
                  },
                  "extra[the_quarry]": {
                    "description": "The quarry. Optional. Used only if you want to upload Steam account.",
                    "title": "The Quarry",
                    "type": "string"
                  },
                  "extra[warframe]": {
                    "description": "Warframe. Optional. Used only if you want to upload Steam account.",
                    "title": "Warframe",
                    "type": "boolean"
                  },
                  "extra[ark]": {
                    "description": "Ark. Optional. Used only if you want to upload Steam account.",
                    "title": "Ark",
                    "type": "boolean"
                  },
                  "extra[socialclub_games]": {
                    "description": "Social club games. Optional. Used only if you want to upload Steam account.",
                    "title": "SocialClub Games",
                    "type": "string"
                  },
                  "extra[game_version]": {
                    "description": "Game version. Required if you want to upload Escape From Tarkov account.",
                    "title": "Game Version",
                    "type": "string"
                  },
                  "extra[cookie_login]": {
                    "description": "Cookie login. Optional. Used only if you want to upload TikTok account.",
                    "title": "Cookie login",
                    "type": "boolean"
                  },
                  "extra[telegramClient]": {
                    "description": "Telegram client. Used only if you want to upload Telegram account.",
                    "$ref": "#/components/schemas/TelegramClientModel"
                  },
                  "extra[telegramJson]": {
                    "description": "Contents of session.json file.",
                    "title": "Telegram Json",
                    "type": "string"
                  },
                  "extra[checkChannels]": {
                    "description": "Check channels. Used only if you want to upload Telegram account.",
                    "title": "Check Channels",
                    "type": "boolean"
                  },
                  "extra[checkSpam]": {
                    "description": "Check spam. Used only if you want to upload Telegram account.",
                    "title": "Check Spam",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastSellModel"
                }
              }
            }
          },
          "403": {
            "description": "Error Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoTempMailModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/item/add": {
      "post": {
        "tags": [
          "Account publishing"
        ],
        "summary": "Add account",
        "description": "Adds account on the market.\n\nAccount origin. Where did you get it from.\n\n> Rate Limit (1 request / 3 seconds) does not apply to this method.\n\n+ brute - Account received using Bruteforce\n+ fishing - Account received from fishing page\n+ stealer - Account received from stealer logs\n+ autoreg - Account is automatically registered by a tool\n+ personal - Account is yours. You created it yourself\n+ resale - Account received from another seller\n+ retrive - Account is recovered by email or phone (only for VKontakte category)\n+ dummy - Dummy (empty) account (only for Steam category)\n\nRequired email login data categories:\n+ 9 - Fortnite\n+ 12 - Epic games\n+ 18 - Escape from Tarkov",
        "operationId": "accountPublishing.addItem",
        "parameters": [
          {
            "$ref": "#/components/parameters/title"
          },
          {
            "name": "title_en",
            "in": "query",
            "description": "English title of account. If **title_en** specified and **title** is empty, **title** will be automatically translated to Russian language.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Title En",
              "type": "string",
              "description": "English title of account. If **title_en** specified and **title** is empty, **title** will be automatically translated to Russian language."
            }
          },
          {
            "$ref": "#/components/parameters/price"
          },
          {
            "name": "type_sell",
            "in": "query",
            "description": "Sales method. If this parameter is not set, **type_sell** will be **price**.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Type Sell",
              "type": "string",
              "description": "Sales method.",
              "enum": [
                "price",
                "auction"
              ]
            }
          },
          {
            "name": "duration_auction_value",
            "in": "query",
            "description": "Duration auction value. At the end of the auction time, the item will be closed if there were no bids.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Duration Auction Value",
              "type": "integer",
              "description": "Duration auction value. At the end of the auction time, the item will be closed if there were no bids.",
              "minimum": 1
            }
          },
          {
            "name": "duration_auction_option",
            "in": "query",
            "description": "Duration auction option.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Duration Auction Option",
              "type": "string",
              "description": "Duration auction option.",
              "enum": [
                "minutes",
                "hours",
                "days"
              ]
            }
          },
          {
            "name": "instant_price",
            "in": "query",
            "description": "The price for which you can instantly redeem your account.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Instant Price",
              "type": "integer",
              "description": "The price for which you can instantly redeem your account."
            }
          },
          {
            "name": "not_bids_action",
            "in": "query",
            "description": "If you set **cancel**, at the end of the auction with 0 bids, the account can be purchased at the price you specified as the minimum bid.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Not Bids Action",
              "type": "string",
              "description": "If you set **cancel**, at the end of the auction with 0 bids, the account can be purchased at the price you specified as the minimum bid.",
              "enum": [
                "close",
                "cancel"
              ]
            }
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "Accounts category.\n+ 1 - Steam\n+ 2 - VK\n+ 3 - Origin\n+ 4 - Warface\n+ 5 - Uplay\n+ 7 - Social Club\n+ 9 - Fortnite\n+ 10 - Instagram\n+ 11 - Battlenet\n+ 12 - Epic Games\n+ 13 - Valorant\n+ 14 - World Of Tanks\n+ 16 - WOT Blitz\n+ 15 - Supercell\n+ 17 - Genshin Impact\n+ 18 - Escape From Tarkov\n+ 19 - VPN\n+ 20 - Tiktok\n+ 22 - Discord\n+ 23 - Cinema\n+ 24 - Telegram\n+ 25 - Youtube\n+ 26 - Spotify\n+ 27 - War Thunder",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/CategoryIdModel"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "Using currency.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/CurrencyModel"
            }
          },
          {
            "name": "item_origin",
            "in": "query",
            "description": "Account origin. Where did you get it from.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Item Origin",
              "type": "string",
              "description": "Account origin. Where did you get it from.",
              "enum": [
                "brute",
                "fishing",
                "stealer",
                "personal",
                "resale",
                "autoreg",
                "dummy"
              ]
            }
          },
          {
            "name": "extended_guarantee",
            "in": "query",
            "description": "Guarantee type.\n+ **-1** - 12 hours\n+ **0** - 24 hours\n+ **1** - 3 days",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Extended Guarantee",
              "type": "integer",
              "description": "Guarantee type.\n+ **-1** - 12 hours\n+ **0** - 24 hours\n+ **1** - 3 days",
              "enum": [
                -1,
                0,
                1
              ]
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Account public description.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Description",
              "type": "string",
              "description": "Account public description."
            }
          },
          {
            "name": "information",
            "in": "query",
            "description": "Account private information (visible for buyer only if purchased).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Information",
              "type": "string",
              "description": "Account private information (visible for buyer only if purchased)."
            }
          },
          {
            "name": "has_email_login_data",
            "in": "query",
            "description": "Required if a **category** is one of list of Required email login data categories.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Has Email Login Data",
              "type": "boolean",
              "description": "Required if a **category** is one of list of Required email login data categories."
            }
          },
          {
            "name": "email_login_data",
            "in": "query",
            "description": "Required if a **category** is one of list of Required email login data categories. Email login data (email:password format).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Email Login Data",
              "type": "string",
              "description": "Required if a **category** is one of list of Required email login data categories. Email login data (email:password format)."
            }
          },
          {
            "name": "email_type",
            "in": "query",
            "description": "Email type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Email Type",
              "type": "string",
              "description": "Email type.",
              "enum": [
                "native",
                "autoreg"
              ]
            }
          },
          {
            "name": "allow_ask_discount",
            "in": "query",
            "description": "Allow users to ask discount for this account.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Allow Ask Discount",
              "type": "boolean",
              "description": "Allow users to ask discount for this account."
            }
          },
          {
            "name": "proxy_id",
            "in": "query",
            "description": "Using proxy id for account checking.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Proxy Id",
              "type": "integer",
              "description": "Using proxy id for account checking."
            }
          },
          {
            "name": "random_proxy",
            "in": "query",
            "description": "Pass 1, if you get captcha in previous response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Random Proxy",
              "type": "integer",
              "description": "Pass 1, if you get captcha in previous response.",
              "enum": [
                1
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddItemModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/goods/check": {
      "post": {
        "tags": [
          "Account publishing"
        ],
        "summary": "Check Not Published Acc",
        "description": "Check and put up to sale not published account OR update account information existing account.\n\n**If you receive a \"captcha\" error, that you should send same request again.**\n\n> Rate Limit (1 request / 3 seconds) does not apply to this method.",
        "operationId": "accountsPublishing.checkNotPublic",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          },
          {
            "name": "close_item",
            "in": "query",
            "description": "If set, the item will be closed **item_state = closed**.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Close Item",
              "type": "boolean",
              "description": "If set, the item will be closed **item_state = closed**."
            }
          },
          {
            "name": "resell_item_id",
            "in": "query",
            "description": "Put if you are trying to resell an account.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Resell Item Id",
              "type": "integer",
              "description": "Put if you are trying to resell an account."
            }
          },
          {
            "name": "random_proxy",
            "in": "query",
            "description": "Pass 1, if you get **captcha** in previous response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Random Proxy",
              "type": "integer",
              "description": "Pass 1, if you get captcha in previous response.",
              "enum": [
                1
              ]
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "login": {
                    "description": "Account login (or email).",
                    "title": "Login",
                    "type": "string"
                  },
                  "password": {
                    "description": "Account password.",
                    "title": "Password",
                    "type": "string"
                  },
                  "login_password": {
                    "description": "Account login data (login:password format).",
                    "title": "Login Password",
                    "type": "string"
                  },
                  "has_email_login_data": {
                    "description": "Required if a **category** is one of list of Required email login data categories.",
                    "title": "Has Email Login Data",
                    "type": "boolean"
                  },
                  "email_login_data": {
                    "description": "Required if a **category** is one of list of Required email login data categories. Email login data (email:password format).",
                    "title": "Email Login Data",
                    "type": "string"
                  },
                  "email_type": {
                    "description": "Email type.",
                    "title": "Email Type",
                    "type": "string",
                    "enum": [
                      "native",
                      "autoreg"
                    ]
                  },
                  "extra[region]": {
                    "description": "Region. Required if you want to upload WoT, Valorant, Escape From Tarkov account. Optional if you want to upload Genshin Impact account.",
                    "title": "Region",
                    "type": "string"
                  },
                  "extra[service_id]": {
                    "description": "Service id. Required if you want to upload VPN, Cinema account.",
                    "title": "Service Id",
                    "type": "string",
                    "enum": [
                      "AdguardVPN",
                      "PIAVPN",
                      "cyberghostVPN",
                      "pureVPN",
                      "ultraVPN",
                      "vanishVPN",
                      "windscribeVPN",
                      "zenmateVPN",
                      "zenmateVPNUltimate",
                      "start"
                    ]
                  },
                  "extra[system]": {
                    "description": "System. Required if you want to upload Supercell account.",
                    "title": "System",
                    "type": "string",
                    "enum": [
                      "laser",
                      "scroll",
                      "magic"
                    ]
                  },
                  "extra[ds_token]": {
                    "description": "Discord token. Required if you want to upload Discord account.",
                    "title": "Discord Token",
                    "type": "string"
                  },
                  "extra[vk_token]": {
                    "description": "VK token. Required if you want to upload VK account.",
                    "title": "VK Token",
                    "type": "string"
                  },
                  "extra[vk_ua]": {
                    "description": "VK User-agent. Optional. Used only if you want to upload VK account.",
                    "title": "VK Token",
                    "type": "string"
                  },
                  "extra[vk_token_auth_only]": {
                    "description": "Login into account by token only. Used only if you want to upload VK account.",
                    "title": "Vk Token Auth Only",
                    "type": "integer",
                    "enum": [
                      1
                    ]
                  },
                  "extra[parse_vote_count]": {
                    "description": "Parse VK balance.",
                    "title": "Parse VK balance",
                    "type": "integer",
                    "enum": [
                      1
                    ]
                  },
                  "extra[cookies]": {
                    "description": "Cookies. Required if you want to upload Youtube, Fortnite, Epic Games, Origin (EA), Social Club, Instagram, TikTok or Warface account.",
                    "title": "Cookies",
                    "type": "string"
                  },
                  "extra[sc]": {
                    "description": "Required if you want to upload Epic Games account.",
                    "title": "sc",
                    "type": "integer",
                    "enum": [
                      1,
                      0
                    ]
                  },
                  "extra[ItTakesTwo]": {
                    "description": "Required if you want to upload Origin (EA) account.",
                    "title": "ItTakesTwo",
                    "type": "integer",
                    "enum": [
                      1,
                      0
                    ]
                  },
                  "extra[apex_legends]": {
                    "description": "Required if you want to upload Origin (EA) account.",
                    "title": "ApexLegends",
                    "type": "integer",
                    "enum": [
                      1,
                      0
                    ]
                  },
                  "extra[login_without_cookies]": {
                    "description": "Login without cookies. Required if you want to upload Instagram account.",
                    "title": "Login Without Cookies",
                    "type": "boolean"
                  },
                  "extra[mfa_file]": {
                    "description": "Mfa file. Optional. Used only if you want to upload Steam account.",
                    "title": "Mfa File",
                    "type": "string"
                  },
                  "extra[dota2_mmr]": {
                    "description": "Dota 2 MMR. Optional. Used only if you want to upload Steam account.",
                    "title": "Dota 2 MMR",
                    "type": "string"
                  },
                  "extra[ea_games]": {
                    "description": "EA Games. Optional. Used only if you want to upload Steam account.",
                    "title": "EA Games",
                    "type": "boolean"
                  },
                  "extra[uplay_games]": {
                    "description": "Uplay Games. Optional. Used only if you want to upload Steam account.",
                    "title": "Uplay Games",
                    "type": "string"
                  },
                  "extra[the_quarry]": {
                    "description": "The quarry. Optional. Used only if you want to upload Steam account.",
                    "title": "The Quarry",
                    "type": "string"
                  },
                  "extra[warframe]": {
                    "description": "Warframe. Optional. Used only if you want to upload Steam account.",
                    "title": "Warframe",
                    "type": "boolean"
                  },
                  "extra[ark]": {
                    "description": "Ark. Optional. Used only if you want to upload Steam account.",
                    "title": "Ark",
                    "type": "boolean"
                  },
                  "extra[socialclub_games]": {
                    "description": "Social club games. Optional. Used only if you want to upload Steam account.",
                    "title": "SocialClub Games",
                    "type": "string"
                  },
                  "extra[game_version]": {
                    "description": "Game version. Required if you want to upload Escape From Tarkov account.",
                    "title": "Game Version",
                    "type": "string"
                  },
                  "extra[cookie_login]": {
                    "description": "Cookie login. Optional. Used only if you want to upload TikTok account.",
                    "title": "Cookie login",
                    "type": "boolean"
                  },
                  "extra[telegramClient]": {
                    "description": "Telegram client. Used only if you want to upload Telegram account.",
                    "$ref": "#/components/schemas/TelegramClientModel"
                  },
                  "extra[telegramJson]": {
                    "description": "Contents of session.json file.",
                    "title": "Telegram Json",
                    "type": "string"
                  },
                  "extra[checkChannels]": {
                    "description": "Check channels. Used only if you want to upload Telegram account.",
                    "title": "Check Channels",
                    "type": "boolean"
                  },
                  "extra[checkSpam]": {
                    "description": "Check spam. Used only if you want to upload Telegram account.",
                    "title": "Check Spam",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoodsCheck"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/goods/add": {
      "get": {
        "tags": [
          "Account publishing"
        ],
        "summary": "Get Info Not Published Acc (Get temp email for account)",
        "description": "Get info about not published item. For categories, which required temporary email (Steam, Social Club), you will get temporary email in response.",
        "operationId": "accountsPublishing.getInfoNotPublic",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          },
          {
            "name": "resell_item_id",
            "in": "query",
            "description": "Put item id, if you are trying to resell item. This is useful to pass temporary email from reselling item to new item. You will get same temporary email from reselling account.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Resell Item Id",
              "type": "integer",
              "description": "Put item id, if you are trying to resell item. This is useful to pass temporary email from reselling item to new item. You will get same temporary email from reselling account."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddGoodsModel"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/email-code": {
      "get": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Get Email Confirmation Code",
        "description": "Gets confirmation code or link.",
        "operationId": "accountsManaging.getEmailCode",
        "parameters": [
          {
            "name": "item_id",
            "in": "query",
            "description": "Item id.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Itemid",
              "type": "integer",
              "description": "Item id."
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Email",
              "type": "string",
              "description": "Email."
            }
          },
          {
            "name": "login",
            "in": "query",
            "description": "Login.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Login.",
              "type": "string",
              "description": "Login."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfCodeModel"
                }
              }
            }
          },
          "403": {
            "description": "Error Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SoldItemModel"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/mafile": {
      "get": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Get Mafile Json",
        "description": "Returns mafile in JSON. **Warning: this action is cancelling active account guarantee.**",
        "operationId": "accountsManaging.getMafileJSON",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaFileModel"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/NoPermissionModel"
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/guard-code": {
      "get": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Get Mafile Confirmation Code",
        "description": "Gets confirmation code from MaFile (Only for Steam accounts).",
        "operationId": "accountsManaging.getMafileCode",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfCodeModel"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/NoPermissionModel"
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/confirm-sda": {
      "post": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Confirm SDA",
        "description": "Confirm steam action. \n\n Don't set **id** and **nonce** parameters to get list of available confirmation requests. \n\n **Warning: this action is cancelling active account guarantee.**",
        "operationId": "accountsManaging.confirmSDA",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Confirmation id. (Required along with **nonce** if you want to confirm action).",
            "schema": {
              "type": "integer",
              "description": "Confirmation id. (Required along with **nonce** if you want to confirm action)."
            }
          },
          {
            "name": "nonce",
            "in": "query",
            "description": "Confirmation nonce. (Required along with **id** if you want to confirm action).",
            "schema": {
              "type": "integer",
              "description": "Confirmation nonce. (Required along with **id** if you want to confirm action)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Successful Response",
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/StatusOK"
                    },
                    "message": {
                      "title": "message",
                      "type": "string",
                      "default": "The action is confirmed"
                    },
                    "system_info": {
                      "$ref": "#/components/schemas/SystemInfoModel"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/NoPermissionModel"
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/telegram-login-code": {
      "get": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Get Telegram Confirmation Code",
        "description": "Gets confirmation code from Telegram.",
        "operationId": "accountsManaging.getTelegramCode",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TgCodeModel"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/NoPermissionModel"
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/telegram-reset-authorizations": {
      "post": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Telegram Reset Auth",
        "description": "Resets Telegram authorizations.",
        "operationId": "accountsManaging.telegramResetAuth",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveChangesModel"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/NoPermissionModel"
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/refuse-guarantee": {
      "post": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Cancel Guarantee",
        "description": "Cancel guarantee of account. It can be useful for account reselling.",
        "operationId": "accountsManaging.cancelGuarantee",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveChangesModel"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/NoPermissionModel"
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/change-password": {
      "post": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Change Password",
        "description": "Changes password of account.",
        "operationId": "accountsManaging.changePassword",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          },
          {
            "name": "_cancel",
            "in": "query",
            "description": "Cancel change password recommendation. It will be helpful, if you don't want to change password and get login data.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": " Cancel",
              "type": "integer",
              "description": "Cancel change password recommendation. It will be helpful, if you don't want to change password and get login data.",
              "enum": [
                1
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordModel"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/NoPermissionModel"
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/temp-email-password": {
      "get": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Get Temp Email Password",
        "description": "Gets password from temp email of account. After calling of this method, the warranty will be cancelled and you cannot automatically resell account.",
        "operationId": "accountsManaging.getPasswordEmail",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TempEmailPasswordModel"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/NoPermissionModel"
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/tag": {
      "post": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Add Tag Account",
        "description": "Adds tag for the account.",
        "operationId": "accountsManaging.addTag",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          },
          {
            "name": "tag_id",
            "in": "query",
            "description": "Tag id (Tag list is available via **GET /me**).",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Tag Id",
              "type": "integer",
              "description": "Tag id (Tag list is available via **GET /me**)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddTagModel"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/NoPermissionModel"
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Delete Tag Account",
        "description": "Deletes tag for the account.",
        "operationId": "accountsManaging.deleteTag",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          },
          {
            "name": "tag_id",
            "in": "query",
            "description": "Tag id (Tag list is available via **GET /me**).",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Tag Id",
              "type": "integer",
              "description": "Tag id (Tag list is available via **GET /me**)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddTagModel"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/NoPermissionModel"
          },
          "404": {
            "description": "Error Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagNotFoundModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/star": {
      "post": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Favorite",
        "description": "Adds account to favorites.",
        "operationId": "accountsManaging.favorite",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkModel"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Unfavorite",
        "description": "Delete account from favorites.",
        "operationId": "accountsManaging.unfavorite",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveChangesModel"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/stick": {
      "post": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Stick Account",
        "description": "Stick account in the top of search.",
        "operationId": "accountsManaging.stick",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveChangesModel"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/NoPermissionModel"
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Unstick Account",
        "description": "Unstick account of the top of search.",
        "operationId": "accountsManaging.unstick",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveChangesModel"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/NoPermissionModel"
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{itemId}/change-owner": {
      "post": {
        "tags": [
          "Accounts managing"
        ],
        "summary": "Change Account Owner",
        "description": "Change of account owner.",
        "operationId": "accountsManaging.changeOwner",
        "parameters": [
          {
            "$ref": "#/components/parameters/itemId"
          },
          {
            "name": "username",
            "in": "query",
            "description": "The username of the new account owner.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Username",
              "type": "string",
              "description": "The username of the new account owner."
            }
          },
          {
            "name": "secret_answer",
            "in": "query",
            "description": "Secret answer of your account.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Secret Answer",
              "type": "string",
              "description": "Secret answer of your account."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveChangesModel"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/NoPermissionModel"
          },
          "404": {
            "$ref": "#/components/responses/AdNotFoundModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/me": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Get Profile Market",
        "description": "Displays info about your profile.",
        "operationId": "marketProfileSettings.getInfo",
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Profile"
        ],
        "summary": "Edit Settings Market",
        "description": "Change settings about your profile on the market.",
        "operationId": "marketProfileSettings.getSettings",
        "parameters": [
          {
            "name": "user_allow_ask_discount",
            "in": "query",
            "description": "Allow users ask discount for your accounts.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "User Allow Ask Discount",
              "type": "boolean",
              "description": "Allow users ask discount for your accounts."
            }
          },
          {
            "name": "max_discount_percent",
            "in": "query",
            "description": "Maximum discount percents for your accounts.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Max Discount Percent",
              "type": "integer",
              "description": "Maximum discount percents for your accounts."
            }
          },
          {
            "name": "disable_steam_guard",
            "in": "query",
            "description": "Disable Steam Guard on account purchase moment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Disable Steam Guard",
              "type": "boolean",
              "description": "Disable Steam Guard on account purchase moment."
            }
          },
          {
            "name": "deauthorize_steam",
            "in": "query",
            "description": "Finish all Steam sessions after purchase.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Deathorize Steam",
              "type": "boolean",
              "description": "Finish all Steam sessions after purchase."
            }
          },
          {
            "name": "hide_favourites",
            "in": "query",
            "description": "Hide your profile info when you add an account to favorites.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Hide Favourites",
              "type": "boolean",
              "description": "Hide your profile info when you add an account to favorites."
            }
          },
          {
            "name": "hide_bids",
            "in": "query",
            "description": "Hide your profile when bid on the auction.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Hide Bids",
              "type": "boolean",
              "description": "Hide your profile when bid on the auction."
            }
          },
          {
            "name": "allow_accept_accounts",
            "in": "query",
            "description": "Usernames who can transfer market accounts to you. Separate values with a comma.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "title": "Allow Accept Accounts",
              "type": "array",
              "description": "Usernames who can transfer market accounts to you. Separate values with a comma.",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "vk_ua",
            "in": "query",
            "description": "Vkontakte user agent.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Vk Ua",
              "type": "string",
              "description": "Vkontakte user agent."
            }
          },
          {
            "name": "market_custom_title",
            "in": "query",
            "description": "Market title.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Market Custom Title",
              "type": "string",
              "description": "Market title."
            }
          },
          {
            "name": "telegram_api_id",
            "in": "query",
            "description": "Telegram api id.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Telegram api id.",
              "type": "string",
              "description": "Telegram api id."
            }
          },
          {
            "name": "telegram_api_hash",
            "in": "query",
            "description": "Telegram api hash.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Telegram api hash.",
              "type": "string",
              "description": "Telegram api hash."
            }
          },
          {
            "name": "telegram_device_model",
            "in": "query",
            "description": "Telegram device model.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Telegram device model.",
              "type": "string",
              "description": "Telegram device model."
            }
          },
          {
            "name": "telegram_system_version",
            "in": "query",
            "description": "Telegram system version.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Telegram system version.",
              "type": "string",
              "description": "Telegram system version."
            }
          },
          {
            "name": "telegram_app_version",
            "in": "query",
            "description": "Telegram app version.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Telegram app version.",
              "type": "string",
              "description": "Telegram app version."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveChangesModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/balance/transfer": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Send Money",
        "description": "Send money to any user.\n\nThe web version additionally has a **redirect** parameter (After payment, there will be a redirect to the specified link).",
        "operationId": "paymentsList.sendMoney",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "User id of receiver. If **user_id** specified, **username** is not required.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "User Id",
              "type": "integer",
              "description": "User id of receiver. If **user_id** specified, **username** is not required."
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Username of receiver. If **username** specified, **user_id** is not required.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Username",
              "type": "string",
              "description": "Username of receiver. If **username** specified, **user_id** is not required."
            }
          },
          {
            "name": "amount",
            "in": "query",
            "description": "Amount to send in your currency.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Amount",
              "type": "integer",
              "description": "Amount to send in your currency.",
              "minimum": 1
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "Using currency for amount.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/CurrencyModel"
            }
          },
          {
            "name": "secret_answer",
            "in": "query",
            "description": "Secret answer of your account.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Secret Answer",
              "type": "string",
              "description": "Secret answer of your account."
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Transfer comment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Comment",
              "maxLength": 255,
              "type": "string",
              "description": "Transfer comment."
            }
          },
          {
            "name": "transfer_hold",
            "in": "query",
            "description": "Hold transfer or not.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Transfer Hold",
              "type": "boolean",
              "description": "Hold transfer or not."
            }
          },
          {
            "name": "hold_length_value",
            "in": "query",
            "description": "Hold length value.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Hold Length Value",
              "type": "integer",
              "description": "Hold length value.",
              "minimum": 1
            }
          },
          {
            "name": "hold_length_option",
            "in": "query",
            "description": "Hold length option.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Hold Length Option",
              "type": "string",
              "description": "Hold length option.",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkModel"
                }
              }
            }
          },
          "403": {
            "description": "Error Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidSAModel"
                }
              }
            }
          },
          "404": {
            "description": "Error Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/user/{userId}/payments": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments History",
        "description": "Displays list of your payments.",
        "operationId": "paymentsList.history",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of operation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Type",
              "type": "string",
              "description": "Type of operation.",
              "enum": [
                "income",
                "cost",
                "refilled_balance",
                "withdrawal_balance",
                "paid_item",
                "sold_item",
                "money_transfer",
                "receiving_money",
                "internal_purchase",
                "claim_hold"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/pmin"
          },
          {
            "$ref": "#/components/parameters/pmax"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "name": "operation_id_lt",
            "in": "query",
            "description": "Id of the operation from which the result begins.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Operation Id lt",
              "type": "integer",
              "description": "Id of the operation from which the result begins."
            }
          },
          {
            "name": "receiver",
            "in": "query",
            "description": "Username of user, which receive money from you.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Receiver",
              "type": "string",
              "description": "Username of user, which receive money from you."
            }
          },
          {
            "name": "sender",
            "in": "query",
            "description": "Username of user, which sent money to you.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Sender",
              "type": "string",
              "description": "Username of user, which sent money to you."
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date of operation (RFC 3339 date format).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Startdate",
              "type": "string",
              "description": "Start date of operation (RFC 3339 date format)."
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date of operation (RFC 3339 date format).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Enddate",
              "type": "string",
              "description": "End date of operation (RFC 3339 date format)."
            }
          },
          {
            "name": "wallet",
            "in": "query",
            "description": "Wallet, which used for money payouts.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Wallet",
              "type": "string",
              "description": "Wallet, which used for money payouts."
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Comment for money transfers.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Comment",
              "type": "string",
              "description": "Comment for money transfers."
            }
          },
          {
            "name": "is_hold",
            "in": "query",
            "description": "Display hold operations.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Is Hold",
              "type": "boolean",
              "description": "Display hold operations."
            }
          },
          {
            "name": "show_payment_stats",
            "in": "query",
            "description": "Display payment stats for selected period (outgoing value, incoming value).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Show Payment Stats",
              "type": "boolean",
              "description": "Display payment stats for selected period (outgoing value, incoming value)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryPaymentsModel"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/NoPermissionModel"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/proxy": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get Proxy",
        "description": "Gets your proxy list.",
        "operationId": "proxySettings.get",
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Proxy"
        ],
        "summary": "Add Proxy",
        "description": "Add single proxy or proxy list.\n\n\nTo add single proxy use this parameters:\n\n\n+ **proxy_ip** (required) - proxy ip or host\n+ **proxy_port** (required) - proxy port\n+ **proxy_user** (optional) - proxy username\n+ **proxy_pass** (optional) - proxy password\n\nTo add proxy list use this parameters:\n\n\n+ **proxy_row** (required) - proxy list in String format ip:port:user:pass. Each proxy must be start with new line (use \\n separator)",
        "operationId": "proxySettings.add",
        "parameters": [
          {
            "name": "proxy_ip",
            "in": "query",
            "description": "Proxy ip or host. Required if **proxy_row** is not specified.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Proxy Ip",
              "type": "string",
              "description": "Proxy ip or host. Required if **proxy_row** is not specified."
            }
          },
          {
            "name": "proxy_port",
            "in": "query",
            "description": "Proxy port. Required if **proxy_row** is not specified.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Proxy Port",
              "type": "integer",
              "description": "Proxy port. Required if **proxy_row** is not specified."
            }
          },
          {
            "name": "proxy_user",
            "in": "query",
            "description": "Proxy username. Required if **proxy_row** is not specified.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Proxy User",
              "type": "string",
              "description": "Proxy username. Required if **proxy_row** is not specified."
            }
          },
          {
            "name": "proxy_pass",
            "in": "query",
            "description": "Proxy password. Required if **proxy_row** is not specified.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Proxy Pass",
              "type": "string",
              "description": "Proxy password. Required if **proxy_row** is not specified."
            }
          },
          {
            "name": "proxy_row",
            "in": "query",
            "description": "Proxy list in String format ip:port:user:pass. Each proxy must be start with new line (use \\n separator)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Proxy Row",
              "type": "string",
              "description": "Proxy list in String format ip:port:user:pass. Each proxy must be start with new line (use \\r\\n separator)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveChangesModel"
                }
              }
            }
          },
          "400": {
            "description": "Error Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncorrectProxyModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Proxy"
        ],
        "summary": "Delete Proxy",
        "description": "Delete single or all proxies.",
        "operationId": "proxySettings.delete",
        "parameters": [
          {
            "name": "proxy_id",
            "in": "query",
            "description": "Id of an existing proxy.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Proxy Id",
              "type": "integer",
              "description": "Id of an existing proxy."
            }
          },
          {
            "name": "delete_all",
            "in": "query",
            "description": "True. If you want to delete all proxy.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Delete All",
              "type": "boolean",
              "description": "True. If you want to delete all proxy."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveChangesModel"
                }
              }
            }
          },
          "403": {
            "description": "Error Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyNotFoundModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/batch": {
      "post": {
        "tags": [
          "Batch requests"
        ],
        "summary": "Batch",
        "description": "Execute multiple API requests at once (Separated by comma). Maximum batch jobs is 10.",
        "operationId": "batchRequests.execute",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobsModel"
                }
              }
            }
          },
          "400": {
            "description": "Error Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidBatchModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    }
  },
  "components": {
    "parameters": {
      "price": {
        "name": "price",
        "in": "query",
        "description": "Current price of account in your currency.",
        "required": true,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Price",
          "type": "integer",
          "description": "Current price of account in your currency.",
          "minimum": 1
        }
      },
      "app_id": {
        "name": "app_id",
        "in": "query",
        "description": "Application id.\n+ 730 - CS2\n+ 578080 - PUBG\n+ 753 - Steam\n+ 570 - Dota 2\n+ 440 - Team Fortress 2\n+ 252490 - Rust\n+ 304930 - Unturned\n+ 232090 - Killing Floor 2\n+ 322330 - Don't Starve Together",
        "required": true,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "App Id",
          "type": "integer",
          "description": "Application id.\n+ 730 - CS2\n+ 578080 - PUBG\n+ 753 - Steam\n+ 570 - Dota 2\n+ 440 - Team Fortress 2\n+ 252490 - Rust\n+ 304930 - Unturned\n+ 232090 - Killing Floor 2\n+ 322330 - Don't Starve Together",
          "enum": [
            730,
            578080,
            753,
            570,
            440,
            252490,
            304930,
            232090,
            322330
          ]
        }
      },
      "bidId": {
        "name": "bid_id",
        "in": "query",
        "description": "Bid id.",
        "required": true,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Bid Id",
          "type": "integer",
          "description": "Bid id."
        }
      },
      "currency": {
        "name": "currency",
        "in": "query",
        "description": "Using currency.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/CurrencyModel"
        }
      },
      "amount": {
        "name": "amount",
        "in": "query",
        "description": "Amount bid.",
        "required": true,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Amount",
          "type": "number",
          "description": "Amount bid.",
          "minimum": 1
        }
      },
      "categoryName": {
        "name": "categoryName",
        "in": "path",
        "description": "Category name.",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "title": "Categoryname",
          "type": "string",
          "description": "Category name.",
          "default": "steam",
          "enum": [
            "steam",
            "fortnite",
            "vkontakte",
            "genshin-impact",
            "valorant",
            "league-of-legends",
            "telegram",
            "supercell",
            "origin",
            "world-of-tanks",
            "wot-blitz",
            "epicgames",
            "escape-from-tarkov",
            "socialclub",
            "uplay",
            "war-thunder",
            "discord",
            "tiktok",
            "instagram",
            "battlenet",
            "vpn",
            "cinema",
            "spotify",
            "warface",
            "youtube"
          ]
        }
      },
      "itemId": {
        "name": "itemId",
        "in": "path",
        "description": "Item id.",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "title": "Itemid",
          "type": "integer",
          "description": "Item id."
        }
      },
      "userId": {
        "name": "userId",
        "in": "path",
        "description": "User id.",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "title": "Userid",
          "type": "integer",
          "description": "User id."
        }
      },
      "category_id": {
        "name": "category_id",
        "in": "query",
        "description": "Accounts category.\n+ 1 - Steam\n+ 2 - VK\n+ 3 - Origin\n+ 4 - Warface\n+ 5 - Uplay\n+ 7 - Social Club\n+ 9 - Fortnite\n+ 10 - Instagram\n+ 11 - Battlenet\n+ 12 - Epic Games\n+ 13 - Valorant\n+ 14 - World Of Tanks\n+ 16 - WOT Blitz\n+ 15 - Supercell\n+ 17 - Genshin Impact\n+ 18 - Escape From Tarkov\n+ 19 - VPN\n+ 20 - Tiktok\n+ 22 - Discord\n+ 23 - Cinema\n+ 24 - Telegram\n+ 25 - Youtube\n+ 26 - Spotify\n+ 27 - War Thunder",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/CategoryIdModel"
        }
      },
      "show": {
        "name": "show",
        "in": "query",
        "description": "Account status.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Show",
          "type": "string",
          "enum": [
            "active",
            "paid",
            "deleted",
            "awaiting"
          ],
          "description": "Account Status."
        }
      },
      "delete_reason": {
        "name": "delete_reason",
        "in": "query",
        "description": "Delete reason. (Only if **show** is set to **deleted**)",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Delete reason",
          "type": "string",
          "description": "Delete reason. (Only if **show** is set to **deleted**)"
        }
      },
      "youtube_viewcount_min": {
        "name": "viewcount_min",
        "in": "query",
        "description": "Minimum views count.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "View Count Min",
          "type": "integer",
          "description": "Minimum views count.",
          "minimum": 0
        }
      },
      "youtube_viewcount_max": {
        "name": "viewcount_max",
        "in": "query",
        "description": "Maximum views count.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "View Count Max",
          "type": "integer",
          "description": "Maximum views count.",
          "minimum": 0
        }
      },
      "youtube_videocount_min": {
        "name": "videocount_min",
        "in": "query",
        "description": "Minimum video count.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Video Count Min",
          "type": "integer",
          "description": "Minimum video count.",
          "minimum": 0
        }
      },
      "youtube_videocount_max": {
        "name": "videocount_max",
        "in": "query",
        "description": "Maximum video count.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Video Count Max",
          "type": "integer",
          "description": "Maximum video count.",
          "minimum": 0
        }
      },
      "youtube_locale": {
        "name": "locale[]",
        "in": "query",
        "description": "List of regions.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Locale",
          "type": "array",
          "description": "List of regions.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "BR",
              "IT",
              "RU",
              "US"
            ]
          }
        }
      },
      "youtube_not_locale": {
        "name": "not_locale[]",
        "in": "query",
        "description": "List of regions that won't be included.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Not Locale",
          "type": "array",
          "description": "List of regions that won't be included.",
          "items": {
            "type": "string",
            "enum": [
              "BR",
              "IT",
              "RU",
              "US"
            ]
          }
        }
      },
      "youtube_brand": {
        "name": "brand",
        "in": "query",
        "description": "Is brand account.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Brand",
          "description": "Is brand account.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "youtube_monetization": {
        "name": "monetization",
        "in": "query",
        "description": "Has monetization.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Monetization",
          "description": "Has monetization.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "youtube_artist": {
        "name": "artist",
        "in": "query",
        "description": "Has status artist.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Artist",
          "description": "Has status artist.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "verified": {
        "name": "verified",
        "in": "query",
        "description": "Has verified.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Verified",
          "description": "Has verified.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "youtube_password": {
        "name": "password",
        "in": "query",
        "description": "Has password.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Password",
          "type": "string",
          "description": "Has password.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "youtube_subscribes_min": {
        "name": "subscribes_min",
        "in": "query",
        "description": "Minimum subscribes.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Subscribes Min",
          "type": "integer",
          "description": "Minimum subscribes.",
          "minimum": 0
        }
      },
      "youtube_subscribes_max": {
        "name": "subscribes_max",
        "in": "query",
        "description": "Maximum subscribes.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Subscribes Max",
          "type": "integer",
          "description": "Maximum subscribes.",
          "minimum": 0
        }
      },
      "warface_bonus_rank_min": {
        "name": "bonus_rank_min",
        "in": "query",
        "description": "Minimum bonus rank.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Bonus Rank Min",
          "type": "integer",
          "description": "Minimum bonus rank.",
          "minimum": 0
        }
      },
      "warface_bonus_rank_max": {
        "name": "bonus_rank_max",
        "in": "query",
        "description": "Maximum bonus rank.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Bonus Rank Max",
          "type": "integer",
          "description": "Maximum bonus rank.",
          "minimum": 0
        }
      },
      "spotify_family": {
        "name": "family",
        "in": "query",
        "description": "Has family subscription.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Family",
          "description": "Has family subscription.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "spotify_family_manager": {
        "name": "family_manager",
        "in": "query",
        "description": "Has family manager permissions.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Family",
          "description": "Has family manager permissions.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "spotify_family_member_count_min": {
        "name": "family_member_count_min",
        "in": "query",
        "description": "Minimum count of members in family.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Family Member Count Min",
          "type": "integer",
          "description": "Minimum count of members in family.",
          "minimum": 1
        }
      },
      "spotify_family_member_count_max": {
        "name": "family_member_count_max",
        "in": "query",
        "description": "Maximum count of members in family.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Family Member Count Max",
          "type": "integer",
          "description": "Maximum count of members in family.",
          "minimum": 1
        }
      },
      "spotify_recurring": {
        "name": "recurring",
        "in": "query",
        "description": "Is auto renewal enabled.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Recurring",
          "description": "Is auto renewal enabled.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "spotify_trial": {
        "name": "trial",
        "in": "query",
        "description": "Trial subscription.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Trial",
          "description": "Trial subscription.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "spotify_plan_name": {
        "name": "plan_name[]",
        "in": "query",
        "description": "List of allowed plans.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Plan Name",
          "type": "array",
          "description": "List of allowed plans.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "Premium Fallback",
              "Premium Student",
              "Premium Duo",
              "Premium Individual",
              "Premium Family"
            ]
          }
        }
      },
      "cinema_service_id": {
        "name": "service_id[]",
        "in": "query",
        "description": "List of allowed cinema services.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Service Id",
          "type": "array",
          "description": "List of allowed cinema services.",
          "items": {
            "type": "string",
            "enum": [
              "start"
            ]
          }
        }
      },
      "cinema_autorenewal": {
        "name": "autorenewal",
        "in": "query",
        "description": "Is auto renewal enabled.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Renewable",
          "description": "Is auto renewal enabled.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "vpn_service_id": {
        "name": "service_id[]",
        "in": "query",
        "description": "List of allowed VPN services.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Service Id",
          "type": "array",
          "description": "List of allowed VPN services.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "AdguardVPN",
              "PIAVPN",
              "cyberghostVPN",
              "pureVPN",
              "ultraVPN",
              "vanishVPN",
              "windscribeVPN",
              "zenmateVPN",
              "zenmateVPNUltimate"
            ]
          }
        }
      },
      "subscription_length": {
        "name": "subscription_length",
        "in": "query",
        "description": "Length of subscription.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Subscription Length",
          "type": "integer",
          "description": "Length of subscription.",
          "minimum": 0
        }
      },
      "subscription_period": {
        "name": "subscription_period",
        "in": "query",
        "description": "In what notation is time measured.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Subscription Period",
          "description": "In what notation is time measured.",
          "$ref": "#/components/schemas/DatePeriodModel"
        }
      },
      "vpn_renewable": {
        "name": "renewable",
        "in": "query",
        "description": "Is renewable enabled.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Renewable",
          "description": "Is renewable enabled.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "battlenet_edit_btag": {
        "name": "edit_btag",
        "in": "query",
        "description": "Can edit BattleTag.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Edit Btag",
          "description": "Can edit BattleTag.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "battlenet_changeable_fn": {
        "name": "changeable_fn",
        "in": "query",
        "description": "Can edit full name.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Changeable Fn",
          "description": "Can edit full name.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "battlenet_real_id": {
        "name": "real_id",
        "in": "query",
        "description": "Real id.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Real Id",
          "type": "string",
          "description": "Real id.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "battlenet_parent_control": {
        "name": "parent_control",
        "in": "query",
        "description": "Has disabled parent control.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Parent Control",
          "description": "Has disabled parent control.",
          "type": "integer",
          "enum": [
            0
          ]
        }
      },
      "cookies": {
        "name": "cookies",
        "in": "query",
        "description": "Login by cookies.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Cookies",
          "description": "Login by cookies.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "instagram_login_without_cookies": {
        "name": "login_without_cookies",
        "in": "query",
        "description": "Login without cookies.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Login Without Cookies",
          "description": "Login without cookies.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "tiktok_cookie_login": {
        "name": "cookie_login",
        "in": "query",
        "description": "Login by cookies.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Cookie Login",
          "description": "Login by cookies.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "tiktok_verified": {
        "name": "verified",
        "in": "query",
        "description": "Has a verified badge.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Verified",
          "description": "Has a verified badge.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "fmin": {
        "name": "fmin",
        "in": "query",
        "description": "Minimum number of followers.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "F Min",
          "type": "integer",
          "description": "Minimum number of followers.",
          "minimum": 0
        }
      },
      "fmax": {
        "name": "fmax",
        "in": "query",
        "description": "Maximum number of followers.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "F Max",
          "type": "integer",
          "description": "Maximum number of followers.",
          "minimum": 0
        }
      },
      "post_min": {
        "name": "post_min",
        "in": "query",
        "description": "Minimum number of posts.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Post Min",
          "type": "integer",
          "description": "Minimum number of posts.",
          "minimum": 0
        }
      },
      "post_max": {
        "name": "post_max",
        "in": "query",
        "description": "Maximum number of posts.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Post Max",
          "type": "integer",
          "description": "Maximum number of posts.",
          "minimum": 0
        }
      },
      "tiktok_like_min": {
        "name": "like_min",
        "in": "query",
        "description": "Minimum number of likes.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Like Min",
          "type": "integer",
          "description": "Minimum number of likes.",
          "minimum": 0
        }
      },
      "tiktok_like_max": {
        "name": "like_max",
        "in": "query",
        "description": "Maximum number of likes.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Like Max",
          "type": "integer",
          "description": "Maximum number of likes.",
          "minimum": 0
        }
      },
      "discord_locale": {
        "name": "locale[]",
        "in": "query",
        "description": "List of regions.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Locale",
          "type": "array",
          "description": "List of regions.",
          "items": {
            "type": "string"
          }
        }
      },
      "discord_not_locale": {
        "name": "not_locale[]",
        "in": "query",
        "description": "List of regions that won't be included.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Not Locale",
          "type": "array",
          "description": "List of regions that won't be included.",
          "items": {
            "type": "string"
          }
        }
      },
      "discord_badge": {
        "name": "badge[]",
        "in": "query",
        "description": "List of badges.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Badge",
          "type": "array",
          "description": "List of badges.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "early_supporter",
              "verified_bot_developer",
              "hypesquad_events",
              "bug_hunter",
              "partner",
              "certificated_moderator"
            ]
          }
        }
      },
      "discord_nitro": {
        "name": "nitro",
        "in": "query",
        "description": "Has Nitro.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Nitro",
          "description": "Has Nitro.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "discord_billing": {
        "name": "billing",
        "in": "query",
        "description": "Has billing.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Billing",
          "description": "Has billing.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "discord_gifts": {
        "name": "gifts",
        "in": "query",
        "description": "Has gifts.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Gifts",
          "description": "Has gifts.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "discord_quarantined": {
        "name": "quarantined",
        "in": "query",
        "description": "Is quarantined.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Quarantined",
          "description": "Is quarantined.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "discord_condition": {
        "name": "condition[]",
        "in": "query",
        "description": "List of account conditions.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Condition",
          "type": "array",
          "description": "List of account conditions.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "empty",
              "nospam",
              "spam",
              "cleaned"
            ]
          }
        }
      },
      "discord_chat_min": {
        "name": "chat_min",
        "in": "query",
        "description": "Minimum number of chats.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Chat Min",
          "type": "integer",
          "description": "Minimum number of chats.",
          "minimum": 0
        }
      },
      "discord_chat_max": {
        "name": "chat_max",
        "in": "query",
        "description": "Maximum number of chats.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Chat Max",
          "type": "integer",
          "description": "Maximum number of chats.",
          "minimum": 0
        }
      },
      "warthunder_wins_min": {
        "name": "wins_min",
        "in": "query",
        "description": "Minimum number of wins.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Wins Min",
          "type": "integer",
          "description": "Minimum number of wins.",
          "minimum": 0
        }
      },
      "warthunder_wins_max": {
        "name": "wins_max",
        "in": "query",
        "description": "Maximum number of wins.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Wins Max",
          "type": "integer",
          "description": "Maximum number of wins.",
          "minimum": 0
        }
      },
      "warthunder_phone_verified": {
        "name": "phone_verified",
        "in": "query",
        "description": "Has verified mobile.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Phone Verified",
          "description": "Has verified mobile.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "warthunder_email_verified": {
        "name": "email_verified",
        "in": "query",
        "description": "Has verified email.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Email Verified",
          "description": "Has verified email.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "rank_min": {
        "name": "rank_min",
        "in": "query",
        "description": "Minimum rank.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Rank Min",
          "type": "integer",
          "description": "Minimum rank.",
          "minimum": 0
        }
      },
      "rank_max": {
        "name": "rank_max",
        "in": "query",
        "description": "Maximum rank.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Rank Max",
          "type": "integer",
          "description": "Maximum rank.",
          "minimum": 0
        }
      },
      "warthunder_eliteUnits_min": {
        "name": "eliteUnits_min",
        "in": "query",
        "description": "Minimum number of elite units.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "EliteUnits Min",
          "type": "integer",
          "description": "Minimum number of elite units.",
          "minimum": 0
        }
      },
      "warthunder_eliteUnits_max": {
        "name": "eliteUnits_max",
        "in": "query",
        "description": "Maximum number of elite units.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "EliteUnits Max",
          "type": "integer",
          "description": "Maximum number of elite units.",
          "minimum": 0
        }
      },
      "warthunder_played_min": {
        "name": "played_min",
        "in": "query",
        "description": "Minimum number of played games.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Played Min",
          "type": "integer",
          "description": "Minimum number of played games.",
          "minimum": 0
        }
      },
      "warthunder_played_max": {
        "name": "played_max",
        "in": "query",
        "description": "Maximum number of played games.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Played Max",
          "type": "integer",
          "description": "Maximum number of played games.",
          "minimum": 0
        }
      },
      "uplay_r6_level_min": {
        "name": "r6_level_min",
        "in": "query",
        "description": "Minimum level in Tom Clancy's Rainbow Six Siege.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "R6 Level Min",
          "type": "integer",
          "description": "Minimum level in Tom Clancy's Rainbow Six Siege.",
          "minimum": 0
        }
      },
      "uplay_r6_level_max": {
        "name": "r6_level_max",
        "in": "query",
        "description": "Maximum level in Tom Clancy's Rainbow Six Siege.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "R6 Level Max",
          "type": "integer",
          "description": "Maximum level in Tom Clancy's Rainbow Six Siege.",
          "minimum": 0
        }
      },
      "sc_rdr2": {
        "name": "rdr2",
        "in": "query",
        "description": "Has Red Dead Redemption 2.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Rdr2",
          "type": "string",
          "description": "Has Red Dead Redemption 2.",
          "enum": [
            "on"
          ]
        }
      },
      "sc_gtav": {
        "name": "gtav",
        "in": "query",
        "description": "Has GTA 5.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Gtav",
          "type": "string",
          "description": "Has GTA 5.",
          "enum": [
            "on"
          ]
        }
      },
      "eft_region": {
        "name": "region",
        "in": "query",
        "description": "Region.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Region",
          "type": "string",
          "description": "Region.",
          "enum": [
            "cis",
            "eu",
            "as",
            "us"
          ]
        }
      },
      "eft_version": {
        "name": "version[]",
        "in": "query",
        "description": "List of versions.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Version",
          "type": "array",
          "description": "List of versions.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "standard",
              "left_behind",
              "prepare_for_escape",
              "edge_of_darkness"
            ]
          }
        }
      },
      "epicgames_sc": {
        "name": "sc",
        "in": "query",
        "description": "Has login data for Social Club account.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Sc",
          "type": "integer",
          "description": "Has login data for Social Club account.",
          "enum": [
            1
          ]
        }
      },
      "wargaming_top_min": {
        "name": "top_min",
        "in": "query",
        "description": "Minimum number of top tanks.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Top Min",
          "type": "integer",
          "description": "Minimum number of top tanks.",
          "minimum": 0
        }
      },
      "wargaming_top_max": {
        "name": "top_max",
        "in": "query",
        "description": "Maximum number of top tanks.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Top Max",
          "type": "integer",
          "description": "Maximum number of top tanks.",
          "minimum": 0
        }
      },
      "wargaming_prem_min": {
        "name": "prem_min",
        "in": "query",
        "description": "Minimum number of premium tanks.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Prem Min",
          "type": "integer",
          "description": "Minimum number of premium tanks.",
          "minimum": 0
        }
      },
      "wargaming_prem_max": {
        "name": "prem_max",
        "in": "query",
        "description": "Maximum number of premium tanks.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Prem Max",
          "type": "integer",
          "description": "Maximum number of premium tanks.",
          "minimum": 0
        }
      },
      "wargaming_top_prem_min": {
        "name": "top_prem_min",
        "in": "query",
        "description": "Minimum number of top premium tanks.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Top Prem Min",
          "type": "integer",
          "description": "Minimum number of top premium tanks.",
          "minimum": 0
        }
      },
      "wargaming_top_prem_max": {
        "name": "top_prem_max",
        "in": "query",
        "description": "Maximum number of top premium tanks.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Top Prem Max",
          "type": "integer",
          "description": "Maximum number of top premium tanks.",
          "minimum": 0
        }
      },
      "wargaming_win_pmin": {
        "name": "win_pmin",
        "in": "query",
        "description": "Minimum number of wins.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Win Pmin",
          "type": "integer",
          "description": "Minimum number of wins.",
          "minimum": 0
        }
      },
      "wargaming_win_pmax": {
        "name": "win_pmax",
        "in": "query",
        "description": "Maximum number of wins.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Win Pmax",
          "type": "integer",
          "description": "Maximum number of wins.",
          "minimum": 0
        }
      },
      "wargaming_tank": {
        "name": "tank[]",
        "in": "query",
        "description": "List of tanks.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Tank",
          "type": "array",
          "description": "List of tanks.",
          "items": {
            "type": "integer"
          }
        }
      },
      "wargaming_region": {
        "name": "region[]",
        "in": "query",
        "description": "Region.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Region",
          "type": "array",
          "description": "Region.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ru",
              "eu",
              "na",
              "asia"
            ]
          }
        }
      },
      "wargaming_not_region": {
        "name": "not_region[]",
        "in": "query",
        "description": "Exclude region.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Not Region",
          "type": "array",
          "description": "Exclude region.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ru",
              "eu",
              "na",
              "asia"
            ]
          }
        }
      },
      "wargaming_battles_min": {
        "name": "battles_min",
        "in": "query",
        "description": "Minimum number of battles.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Battles Min",
          "type": "integer",
          "description": "Minimum number of battles.",
          "minimum": 0
        }
      },
      "wargaming_battles_max": {
        "name": "battles_max",
        "in": "query",
        "description": "Maximum number of battles.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Battles Max",
          "type": "integer",
          "description": "Maximum number of battles.",
          "minimum": 0
        }
      },
      "wargaming_gold_min": {
        "name": "gold_min",
        "in": "query",
        "description": "Minimum number of gold.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Gold Min",
          "type": "integer",
          "description": "Minimum number of gold.",
          "minimum": 0
        }
      },
      "wargaming_gold_max": {
        "name": "gold_max",
        "in": "query",
        "description": "Maximum number of gold.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Gold Max",
          "type": "integer",
          "description": "Maximum number of gold.",
          "minimum": 0
        }
      },
      "wargaming_silver_min": {
        "name": "silver_min",
        "in": "query",
        "description": "Minimum number of silver.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Silver Min",
          "type": "integer",
          "description": "Minimum number of silver.",
          "minimum": 0
        }
      },
      "wargaming_silver_max": {
        "name": "silver_max",
        "in": "query",
        "description": "Maximum number of silver.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Silver Max",
          "type": "integer",
          "description": "Maximum number of silver.",
          "minimum": 0
        }
      },
      "origin_subscription": {
        "name": "subscription",
        "in": "query",
        "description": "Name of subscription.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Subscription",
          "type": "string",
          "description": "Name of subscription.",
          "enum": [
            "EA Play",
            "EA Play Pro"
          ]
        }
      },
      "origin_al_rank_group": {
        "name": "al_rank_group[]",
        "in": "query",
        "description": "List of Apex Legends rank groups.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Al Rank Group",
          "type": "array",
          "description": "List of Apex Legends rank groups.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "Rookie",
              "Bronze",
              "Silver",
              "Gold",
              "Platinum",
              "Diamond",
              "Master"
            ]
          }
        }
      },
      "origin_al_level_min": {
        "name": "al_level_min",
        "in": "query",
        "description": "Minimum level in Apex Legends.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Al Level Min",
          "type": "integer",
          "description": "Minimum level in Apex Legends.",
          "minimum": 1
        }
      },
      "origin_al_level_max": {
        "name": "al_level_max",
        "in": "query",
        "description": "Maximum level in Apex Legends.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Al Level Max",
          "type": "integer",
          "description": "Maximum level in Apex Legends.",
          "minimum": 1
        }
      },
      "origin_xbox_connected": {
        "name": "xbox_connected",
        "in": "query",
        "description": "Xbox connected to account.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Xbox Connected",
          "type": "string",
          "description": "Xbox connected to account.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "origin_steam_connected": {
        "name": "steam_connected",
        "in": "query",
        "description": "Steam connected to account.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Steam Connected",
          "type": "string",
          "description": "Steam connected to account.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "supercell_cup_min": {
        "name": "cup_min",
        "in": "query",
        "description": "Minimum number of cups.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Cup Min",
          "type": "integer",
          "description": "Minimum number of cups.",
          "minimum": 1
        }
      },
      "supercell_cup_max": {
        "name": "cup_max",
        "in": "query",
        "description": "Maximum number of cups.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Cup Max",
          "type": "integer",
          "description": "Maximum number of cups.",
          "minimum": 1
        }
      },
      "supercell_brawlers_min": {
        "name": "brawlers_min",
        "in": "query",
        "description": "Minimum number of brawlers.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Brawlers Min",
          "type": "integer",
          "description": "Minimum number of brawlers.",
          "minimum": 1
        }
      },
      "supercell_brawlers_max": {
        "name": "brawlers_max",
        "in": "query",
        "description": "Maximum number of brawlers.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Brawlers Max",
          "type": "integer",
          "description": "Maximum number of brawlers.",
          "minimum": 1
        }
      },
      "supercell_brawler": {
        "name": "brawler[]",
        "in": "query",
        "description": "List of brawlers.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Brawler",
          "type": "array",
          "description": "List of brawlers.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "SHELLY",
              "COLT",
              "BULL",
              "BROCK",
              "RICO",
              "SPIKE",
              "BARLEY",
              "JESSIE",
              "NITA",
              "DYNAMIKE",
              "EL PRIMO",
              "MORTIS",
              "CROW",
              "POCO",
              "BO",
              "PIPER",
              "PAM",
              "TARA",
              "DARRYL",
              "PENNY",
              "FRANK",
              "GENE",
              "TICK",
              "LEON",
              "ROSA",
              "CARL",
              "BIBI",
              "8-BIT",
              "SANDY",
              "BEA"
            ]
          }
        }
      },
      "supercell_system": {
        "name": "system",
        "in": "query",
        "description": "Account service.\n+ laser - Brawl Stars\n+ scroll - Clash Royale\n+ magic - Clash Of Clans",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "System",
          "type": "string",
          "description": "Account service.",
          "enum": [
            "laser",
            "scroll",
            "magic"
          ]
        }
      },
      "telegram_min_contacts": {
        "name": "min_contacts",
        "in": "query",
        "description": "Minimum number of contacts.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Minimum number of contacts",
          "type": "integer",
          "description": "Minimum number of contacts.",
          "minimum": 0
        }
      },
      "telegram_max_contacts": {
        "name": "max_contacts",
        "in": "query",
        "description": "Maximum number of contacts.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Maximum number of contacts",
          "type": "integer",
          "description": "Maximum number of contacts.",
          "minimum": 0
        }
      },
      "telegram_min_admin": {
        "name": "min_admin",
        "in": "query",
        "description": "Minimum number of channels, where account is administrator/owner.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Min Admin",
          "type": "integer",
          "description": "Minimum number of channels, where account is administrator/owner.",
          "minimum": 0
        }
      },
      "telegram_max_admin": {
        "name": "max_admin",
        "in": "query",
        "description": "Maximum number of channels, where account is administrator/owner.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Max Admin",
          "type": "integer",
          "description": "Maximum number of channels, where account is administrator/owner.",
          "minimum": 0
        }
      },
      "telegram_min_admin_sub": {
        "name": "min_admin_sub",
        "in": "query",
        "description": "Minimum number of subscribers in channel, where account is administrator/owner.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Min Admin Sub",
          "type": "integer",
          "description": "Minimum number of subscribers in channel, where account is administrator/owner.",
          "minimum": 1
        }
      },
      "telegram_max_admin_sub": {
        "name": "max_admin_sub",
        "in": "query",
        "description": "Maximum number of subscribers in channel, where account is administrator/owner.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Max Admin Sub",
          "type": "integer",
          "description": "Maximum number of subscribers in channel, where account is administrator/owner.",
          "minimum": 1
        }
      },
      "telegram_dig_min": {
        "name": "dig_min",
        "in": "query",
        "description": "Minimum number of digits in ID.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Dig Min",
          "type": "integer",
          "description": "Minimum number of digits in ID.",
          "minimum": 1
        }
      },
      "telegram_dig_max": {
        "name": "dig_max",
        "in": "query",
        "description": "Maximum number of digits in ID.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Dig Max",
          "type": "integer",
          "description": "Maximum number of digits in ID.",
          "minimum": 1
        }
      },
      "telegram_min_channels": {
        "name": "min_channels",
        "in": "query",
        "description": "Minimum number of channels.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Min Channels",
          "type": "integer",
          "description": "Minimum number of channels.",
          "minimum": 0
        }
      },
      "telegram_max_channels": {
        "name": "max_channels",
        "in": "query",
        "description": "Maximum number of channels.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Max Channels",
          "type": "integer",
          "description": "Maximum number of channels.",
          "minimum": 0
        }
      },
      "telegram_min_chats": {
        "name": "min_chats",
        "in": "query",
        "description": "Minimum number of chats.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Min Chats",
          "type": "integer",
          "description": "Minimum number of chats.",
          "minimum": 0
        }
      },
      "telegram_max_chats": {
        "name": "max_chats",
        "in": "query",
        "description": "Maximum number of chats.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Max Chats",
          "type": "integer",
          "description": "Maximum number of chats.",
          "minimum": 0
        }
      },
      "telegram_min_conversations": {
        "name": "min_conversations",
        "in": "query",
        "description": "Minimum number of conversations.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Min Conversations",
          "type": "integer",
          "description": "Minimum number of conversations.",
          "minimum": 0
        }
      },
      "telegram_max_conversations": {
        "name": "max_conversations",
        "in": "query",
        "description": "Maximum number of conversations.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Max Conversations",
          "type": "integer",
          "description": "Maximum number of conversations.",
          "minimum": 0
        }
      },
      "telegram_spam": {
        "name": "spam",
        "in": "query",
        "description": "Has a spam ban.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Spam",
          "description": "Has a spam ban.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "telegram_password": {
        "name": "password",
        "in": "query",
        "description": "Has a cloud password.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Password",
          "type": "string",
          "description": "Has a cloud password.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "premium": {
        "name": "premium",
        "in": "query",
        "description": "Has a premium subscription.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Premium",
          "description": "Has a premium subscription.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "lol_skin": {
        "name": "skin[]",
        "in": "query",
        "description": "List of skins.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Skin",
          "type": "array",
          "description": "List of skins.",
          "items": {
            "type": "string"
          }
        }
      },
      "lol_champion": {
        "name": "champion[]",
        "in": "query",
        "description": "List of champions.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Champion",
          "type": "array",
          "description": "List of champions.",
          "items": {
            "type": "string"
          }
        }
      },
      "lol_region": {
        "name": "region[]",
        "in": "query",
        "description": "Region.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Region",
          "type": "array",
          "description": "Region.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "la1",
              "la2",
              "br1",
              "euw1",
              "tr1",
              "na1",
              "eun1",
              "ru",
              "oc1",
              "jp1",
              "ph2",
              "vn2",
              "th2",
              "sg2"
            ]
          }
        }
      },
      "lol_wallet_orange_min": {
        "name": "wallet_orange_min",
        "in": "query",
        "description": "Minimum wallet orange balance.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Wallet Orange Min",
          "type": "integer",
          "description": "Minimum wallet orange balance.",
          "minimum": 0
        }
      },
      "lol_wallet_orange_max": {
        "name": "wallet_orange_max",
        "in": "query",
        "description": "Maximum wallet orange balance.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Wallet Orange Max",
          "type": "integer",
          "description": "Maximum wallet orange balance.",
          "minimum": 0
        }
      },
      "lol_wallet_mythic_min": {
        "name": "wallet_mythic_min",
        "in": "query",
        "description": "Minimum wallet mythic balance.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Wallet Mythic Min",
          "type": "integer",
          "description": "Minimum wallet mythic balance.",
          "minimum": 0
        }
      },
      "lol_wallet_mythic_max": {
        "name": "wallet_mythic_max",
        "in": "query",
        "description": "Maximum wallet mythic balance.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Wallet Mythic Max",
          "type": "integer",
          "description": "Maximum wallet mythic balance.",
          "minimum": 0
        }
      },
      "lol_wallet_riot_min": {
        "name": "wallet_riot_min",
        "in": "query",
        "description": "Minimum wallet riot balance.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Wallet Riot Min",
          "type": "integer",
          "description": "Minimum wallet riot balance.",
          "minimum": 0
        }
      },
      "lol_wallet_riot_max": {
        "name": "wallet_riot_max",
        "in": "query",
        "description": "Maximum wallet riot balance.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Wallet Riot Max",
          "type": "integer",
          "description": "Maximum wallet riot balance.",
          "minimum": 0
        }
      },
      "lol_lvl_min": {
        "name": "lvl_min",
        "in": "query",
        "description": "Minimum level.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Lvl Min",
          "type": "integer",
          "description": "Minimum level.",
          "minimum": 1
        }
      },
      "lol_lvl_max": {
        "name": "lvl_max",
        "in": "query",
        "description": "Maximum level.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Lvl Max",
          "type": "integer",
          "description": "Maximum level.",
          "minimum": 1
        }
      },
      "lol_winrate_min": {
        "name": "winrate_min",
        "in": "query",
        "description": "Minimum winrate.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Winrate Min",
          "type": "integer",
          "description": "Minimum winrate.",
          "minimum": 0
        }
      },
      "lol_winrate_max": {
        "name": "winrate_max",
        "in": "query",
        "description": "Maximum winrate.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Winrate Max",
          "type": "integer",
          "description": "Maximum winrate.",
          "minimum": 0
        }
      },
      "lol_wallet_blue_min": {
        "name": "wallet_blue_min",
        "in": "query",
        "description": "Minimum wallet blue balance.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Wallet Blue Min",
          "type": "integer",
          "description": "Minimum wallet blue balance.",
          "minimum": 0
        }
      },
      "lol_wallet_blue_max": {
        "name": "wallet_blue_max",
        "in": "query",
        "description": "Maximum wallet blue balance.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Wallet Blue Max",
          "type": "integer",
          "description": "Maximum wallet blue balance.",
          "minimum": 0
        }
      },
      "changeable_email": {
        "name": "changeable_email",
        "in": "query",
        "description": "Can change email.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Changeable Email",
          "description": "Can change email.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "valorant_rank_type": {
        "name": "rank_type",
        "in": "query",
        "description": "Rank type.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Rank Type",
          "type": "string",
          "description": "Rank type.",
          "enum": [
            "ranked",
            "ranked_ready",
            "unrated"
          ]
        }
      },
      "valorant_amin": {
        "name": "amin",
        "in": "query",
        "description": "Minimum amount of agents.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "A Min",
          "type": "integer",
          "description": "Minimum amount of agents.",
          "minimum": 0
        }
      },
      "valorant_amax": {
        "name": "amax",
        "in": "query",
        "description": "Maximum amount of agents.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "A Max",
          "type": "integer",
          "description": "Maximum amount of agents.",
          "minimum": 0
        }
      },
      "valorant_region": {
        "name": "region[]",
        "in": "query",
        "description": "Region.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Region",
          "type": "array",
          "description": "Region.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "eu",
              "ap",
              "kr",
              "na",
              "br",
              "la"
            ]
          }
        }
      },
      "valorant_not_region": {
        "name": "not_region[]",
        "in": "query",
        "description": "Exclude region.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Not Region",
          "type": "array",
          "description": "Exclude region.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "eu",
              "ap",
              "kr",
              "na",
              "br",
              "la"
            ]
          }
        }
      },
      "valorant_last_rmin": {
        "name": "last_rmin",
        "in": "query",
        "description": "Last minimum rank.\n+ 3/4/5 - Iron 1/2/3\n+ 6/7/8 - Bronze 1/2/3\n+ 9/10/11 - Silver 1/2/3\n+ 12/13/14 - Gold 1/2/3\n+ 15/16/17 - Platinum 1/2/3\n+ 18/19/20 - Diamond 1/2/3\n+ 21/22/23 - Ascendant 1/2/3\n+ 24/25/26 - Immortal 1/2/3\n+ 27 - Radiant",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Last R Min",
          "type": "integer",
          "description": "Last minimum rank.\n+ 3/4/5 - Iron 1/2/3\n+ 6/7/8 - Bronze 1/2/3\n+ 9/10/11 - Silver 1/2/3\n+ 12/13/14 - Gold 1/2/3\n+ 15/16/17 - Platinum 1/2/3\n+ 18/19/20 - Diamond 1/2/3\n+ 21/22/23 - Ascendant 1/2/3\n+ 24/25/26 - Immortal 1/2/3\n+ 27 - Radiant",
          "minimum": 3,
          "maximum": 27
        }
      },
      "valorant_last_rmax": {
        "name": "last_rmax",
        "in": "query",
        "description": "Last maximum rank.\n+ 3/4/5 - Iron 1/2/3\n+ 6/7/8 - Bronze 1/2/3\n+ 9/10/11 - Silver 1/2/3\n+ 12/13/14 - Gold 1/2/3\n+ 15/16/17 - Platinum 1/2/3\n+ 18/19/20 - Diamond 1/2/3\n+ 21/22/23 - Ascendant 1/2/3\n+ 24/25/26 - Immortal 1/2/3\n+ 27 - Radiant",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Last R Max",
          "type": "integer",
          "description": "Maximum rank.\n+ 3/4/5 - Iron 1/2/3\n+ 6/7/8 - Bronze 1/2/3\n+ 9/10/11 - Silver 1/2/3\n+ 12/13/14 - Gold 1/2/3\n+ 15/16/17 - Platinum 1/2/3\n+ 18/19/20 - Diamond 1/2/3\n+ 21/22/23 - Ascendant 1/2/3\n+ 24/25/26 - Immortal 1/2/3\n+ 27 - Radiant",
          "minimum": 3,
          "maximum": 27
        }
      },
      "valorant_rmin": {
        "name": "rmin",
        "in": "query",
        "description": "Minimum rank.\n+ 3/4/5 - Iron 1/2/3\n+ 6/7/8 - Bronze 1/2/3\n+ 9/10/11 - Silver 1/2/3\n+ 12/13/14 - Gold 1/2/3\n+ 15/16/17 - Platinum 1/2/3\n+ 18/19/20 - Diamond 1/2/3\n+ 21/22/23 - Ascendant 1/2/3\n+ 24/25/26 - Immortal 1/2/3\n+ 27 - Radiant",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "R Min",
          "type": "integer",
          "description": "Minimum rank.\n+ 3/4/5 - Iron 1/2/3\n+ 6/7/8 - Bronze 1/2/3\n+ 9/10/11 - Silver 1/2/3\n+ 12/13/14 - Gold 1/2/3\n+ 15/16/17 - Platinum 1/2/3\n+ 18/19/20 - Diamond 1/2/3\n+ 21/22/23 - Ascendant 1/2/3\n+ 24/25/26 - Immortal 1/2/3\n+ 27 - Radiant",
          "minimum": 3,
          "maximum": 27
        }
      },
      "valorant_rmax": {
        "name": "rmax",
        "in": "query",
        "description": "Maximum rank.\n+ 3/4/5 - Iron 1/2/3\n+ 6/7/8 - Bronze 1/2/3\n+ 9/10/11 - Silver 1/2/3\n+ 12/13/14 - Gold 1/2/3\n+ 15/16/17 - Platinum 1/2/3\n+ 18/19/20 - Diamond 1/2/3\n+ 21/22/23 - Ascendant 1/2/3\n+ 24/25/26 - Immortal 1/2/3\n+ 27 - Radiant",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "R Max",
          "type": "integer",
          "description": "Maximum rank.\n+ 3/4/5 - Iron 1/2/3\n+ 6/7/8 - Bronze 1/2/3\n+ 9/10/11 - Silver 1/2/3\n+ 12/13/14 - Gold 1/2/3\n+ 15/16/17 - Platinum 1/2/3\n+ 18/19/20 - Diamond 1/2/3\n+ 21/22/23 - Ascendant 1/2/3\n+ 24/25/26 - Immortal 1/2/3\n+ 27 - Radiant",
          "minimum": 3,
          "maximum": 27
        }
      },
      "valorant_level_min": {
        "name": "level_min",
        "in": "query",
        "description": "Minimum level.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Level Min",
          "type": "integer",
          "description": "Minimum level.",
          "minimum": 1
        }
      },
      "valorant_level_max": {
        "name": "level_max",
        "in": "query",
        "description": "Maximum level.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Level Max",
          "type": "integer",
          "description": "Maximum level.",
          "minimum": 1
        }
      },
      "valorant_inv_min": {
        "name": "inv_min",
        "in": "query",
        "description": "Minimum inventory value.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Inv Min",
          "type": "integer",
          "description": "Minimum inventory value.",
          "minimum": 0
        }
      },
      "valorant_inv_max": {
        "name": "inv_max",
        "in": "query",
        "description": "Maximum inventory value.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Inv Max",
          "type": "integer",
          "description": "Maximum inventory value.",
          "minimum": 0
        }
      },
      "valorant_vp_min": {
        "name": "vp_min",
        "in": "query",
        "description": "Minimum number of Valorant points.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Vp Min",
          "type": "integer",
          "description": "Minimum number of Valorant points.",
          "minimum": 0
        }
      },
      "valorant_vp_max": {
        "name": "vp_max",
        "in": "query",
        "description": "Maximum number of Valorant points.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Vp Max",
          "type": "integer",
          "description": "Maximum number of Valorant points.",
          "minimum": 0
        }
      },
      "valorant_weaponSkin": {
        "name": "weaponSkin[]",
        "in": "query",
        "description": "List of weapon skins.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Weapon Skin",
          "type": "array",
          "description": "List of weapon skins.",
          "items": {
            "type": "string"
          }
        }
      },
      "valorant_knife": {
        "name": "knife",
        "in": "query",
        "description": "Has any knife.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Knife",
          "type": "integer",
          "description": "Has any knife.",
          "enum": [
            1,
            0
          ]
        }
      },
      "valorant_buddy": {
        "name": "buddy[]",
        "in": "query",
        "description": "List of buddies.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Buddy",
          "type": "array",
          "description": "List of buddies.",
          "items": {
            "type": "string"
          }
        }
      },
      "valorant_agent": {
        "name": "agent[]",
        "in": "query",
        "description": "List of agents.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Agent",
          "type": "array",
          "description": "List of agents.",
          "items": {
            "type": "string"
          }
        }
      },
      "mihoyo_char_min": {
        "name": "char_min",
        "in": "query",
        "description": "Minimum number of characters.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Char Min",
          "type": "integer",
          "description": "Minimum number of characters.",
          "minimum": 1
        }
      },
      "mihoyo_char_max": {
        "name": "char_max",
        "in": "query",
        "description": "Maximum number of characters.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Char Max",
          "type": "integer",
          "description": "Maximum number of characters.",
          "minimum": 1
        }
      },
      "mihoyo_level_min": {
        "name": "level_min",
        "in": "query",
        "description": "Minimum level.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Level Min",
          "type": "integer",
          "description": "Minimum level.",
          "minimum": 1
        }
      },
      "mihoyo_level_max": {
        "name": "level_max",
        "in": "query",
        "description": "Maximum level.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Level Max",
          "type": "integer",
          "description": "Maximum level.",
          "minimum": 1
        }
      },
      "mihoyo_character": {
        "name": "character[]",
        "in": "query",
        "description": "List of characters.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Character",
          "type": "array",
          "description": "List of characters.",
          "items": {
            "type": "integer"
          }
        }
      },
      "mihoyo_weapon": {
        "name": "weapon[]",
        "in": "query",
        "description": "List of weapons.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Weapon",
          "type": "array",
          "description": "List of weapons.",
          "items": {
            "type": "integer"
          }
        }
      },
      "genshin_region": {
        "name": "region",
        "in": "query",
        "description": "Region.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Region",
          "type": "string",
          "description": "Region.",
          "enum": [
            "os_euro",
            "os_asia",
            "os_usa",
            "os_cht"
          ]
        }
      },
      "honkai_region": {
        "name": "region",
        "in": "query",
        "description": "Region.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Region",
          "type": "string",
          "description": "Region.",
          "uniqueItems": true,
          "enum": [
            "prod_official_asia",
            "prod_official_usa",
            "prod_official_eur",
            "prod_official_cht"
          ]
        }
      },
      "honkai_achievement_min": {
        "name": "achievement_min",
        "in": "query",
        "description": "Minimum number of achievement.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Achievement min",
          "type": "integer",
          "description": "Minimum number of achievement.",
          "minimum": 0
        }
      },
      "honkai_achievement_max": {
        "name": "achievement_max",
        "in": "query",
        "description": "Maximum number of achievement.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Achievement max",
          "type": "integer",
          "description": "Maximum number of achievement.",
          "minimum": 0
        }
      },
      "honkai_chest_min": {
        "name": "chest_min",
        "in": "query",
        "description": "Minimum number of opened chest.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Chest min",
          "type": "integer",
          "description": "Minimum number of opened chest.",
          "minimum": 0
        }
      },
      "honkai_chest_max": {
        "name": "chest_max",
        "in": "query",
        "description": "Maximum number of opened chest.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Chest max",
          "type": "integer",
          "description": "Maximum number of opened chest.",
          "minimum": 0
        }
      },
      "mihoyo_ea": {
        "name": "ea",
        "in": "query",
        "description": "Has linked external accounts.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Ea",
          "description": "Has linked external accounts.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "mihoyo_legendary_min": {
        "name": "legendary_min",
        "in": "query",
        "description": "Minimum number of legendary characters.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Legendary Min",
          "type": "integer",
          "description": "Minimum number of legendary characters.",
          "minimum": 0
        }
      },
      "mihoyo_legendary_max": {
        "name": "legendary_max",
        "in": "query",
        "description": "Maximum number of legendary characters.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Legendary Max",
          "type": "integer",
          "description": "Maximum number of legendary characters.",
          "minimum": 0
        }
      },
      "mihoyo_constellation_min": {
        "name": "constellation_min",
        "in": "query",
        "description": "Minimum number of constellations on legendary characters.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Constellation Min",
          "type": "integer",
          "description": "Minimum number of constellations on legendary characters.",
          "minimum": 0
        }
      },
      "mihoyo_constellation_max": {
        "name": "constellation_max",
        "in": "query",
        "description": "Maximum number of constellations on legendary characters.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Constellation Max",
          "type": "integer",
          "description": "Maximum number of constellations on legendary characters.",
          "minimum": 0
        }
      },
      "mihoyo_legendary_weapon_min": {
        "name": "legendary_weapon_min",
        "in": "query",
        "description": "Minimum number of legendary weapon characters.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Legendary Weapon Min",
          "type": "integer",
          "description": "Minimum number of legendary weapon characters.",
          "minimum": 0
        }
      },
      "mihoyo_legendary_weapon_max": {
        "name": "legendary_weapon_max",
        "in": "query",
        "description": "Maximum number of legendary weapon characters.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Legendary Weapon Max",
          "type": "integer",
          "description": "Maximum number of legendary weapon characters.",
          "minimum": 0
        }
      },
      "vk_mcountry": {
        "name": "mcountry[]",
        "in": "query",
        "description": "List of allowed countries of phone number.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "M Country",
          "type": "array",
          "description": "List of allowed countries of phone number.",
          "items": {
            "type": "string"
          }
        }
      },
      "vk_not_mcountry": {
        "name": "not_mcountry[]",
        "in": "query",
        "description": "List of excluded countries of phone number.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Not M Country",
          "type": "array",
          "description": "List of excluded countries of phone number.",
          "items": {
            "type": "string"
          }
        }
      },
      "vk_opened_profile": {
        "name": "opened_profile",
        "in": "query",
        "description": "Opened account profile.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Opened Profile",
          "type": "integer",
          "description": "Opened account profile.",
          "enum": [
            1
          ]
        }
      },
      "vk_group_follower_min": {
        "name": "group_follower_min",
        "in": "query",
        "description": "Minimum number of group followers.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Group Follower Min",
          "type": "integer",
          "description": "Minimum number of group followers.",
          "minimum": 1
        }
      },
      "vk_group_follower_max": {
        "name": "group_follower_max",
        "in": "query",
        "description": "Maximum number of group followers.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Group Follower Max",
          "type": "integer",
          "description": "Maximum number of group followers.",
          "minimum": 1
        }
      },
      "vk_groups_min": {
        "name": "groups_min",
        "in": "query",
        "description": "Minimum number of groups.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Groups Min",
          "type": "integer",
          "description": "Minimum number of groups.",
          "minimum": 0
        }
      },
      "vk_groups_max": {
        "name": "groups_max",
        "in": "query",
        "description": "Maximum number of groups.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Groups Max",
          "type": "integer",
          "description": "Maximum number of groups.",
          "minimum": 0
        }
      },
      "vk_admin_level": {
        "name": "admin_level",
        "in": "query",
        "description": "Admin level.\n+ 1 - Moderator\n+ 2 - Editor\n+ 3 - Admin\n+ 4 - Owner",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Admin Level",
          "type": "integer",
          "description": "Admin level.",
          "enum": [
            1,
            2,
            3,
            4
          ]
        }
      },
      "vk_min_age": {
        "name": "min_age",
        "in": "query",
        "description": "Minimum age.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Min Age",
          "type": "integer",
          "description": "Minimum age.",
          "minimum": 0
        }
      },
      "vk_max_age": {
        "name": "max_age",
        "in": "query",
        "description": "Maximum age.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Max Age",
          "type": "integer",
          "description": "Maximum age.",
          "minimum": 0
        }
      },
      "vk_dig_min": {
        "name": "dig_min",
        "in": "query",
        "description": "Minimum number of digits in ID.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Dig Min",
          "type": "integer",
          "description": "Minimum number of digits in ID.",
          "minimum": 4,
          "maximum": 13
        }
      },
      "vk_dig_max": {
        "name": "dig_max",
        "in": "query",
        "description": "Maximum number of digits in ID.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Dig Max",
          "type": "integer",
          "description": "Maximum number of digits in ID.",
          "minimum": 4,
          "maximum": 14
        }
      },
      "vk_conversations_min": {
        "name": "conversations_min",
        "in": "query",
        "description": "Minimum number of conversations.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Conversations Min",
          "type": "integer",
          "description": "Minimum number of conversations.",
          "minimum": 0
        }
      },
      "vk_conversations_max": {
        "name": "conversations_max",
        "in": "query",
        "description": "Maximum number of conversations.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Conversations Max",
          "type": "integer",
          "description": "Maximum number of conversations.",
          "minimum": 0
        }
      },
      "vk_sex": {
        "name": "sex",
        "in": "query",
        "description": "Sex of account.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Sex",
          "type": "string",
          "description": "Sex of account.",
          "enum": [
            "man",
            "woman"
          ]
        }
      },
      "tel": {
        "name": "tel",
        "in": "query",
        "description": "Has linked mobile.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Tel",
          "type": "string",
          "description": "Has linked mobile.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "email": {
        "name": "email",
        "in": "query",
        "description": "Has linked email.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Email",
          "type": "string",
          "description": "Has linked email.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "vk_tfa": {
        "name": "tfa",
        "in": "query",
        "description": "Has enabled 2FA.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Tfa",
          "type": "string",
          "description": "Has enabled 2FA.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "vk_relation": {
        "name": "relation[]",
        "in": "query",
        "description": "Relationship.\n+ 0 - Not specified\n+ 1 - Not married\n+ 2 - There is a friend/girlfriend\n+ 3 - Engaged\n+ 4 - Married\n+ 5 - Everything is complicated\n+ 6 - In active search\n+ 7 - In love\n+ 8 - In a civil marriage",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Relation",
          "type": "array",
          "description": "Relationship.",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8
            ]
          }
        }
      },
      "vk_token_auth_only": {
        "name": "token_auth_only",
        "in": "query",
        "description": "Login into account by token only.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Token Auth Only",
          "type": "string",
          "description": "Login into account by token only.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "vk_country": {
        "name": "vk_country[]",
        "in": "query",
        "description": "List of allowed countries.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Vk Country",
          "type": "array",
          "description": "List of allowed countries.",
          "items": {
            "type": "string"
          }
        }
      },
      "vk_city": {
        "name": "vk_city[]",
        "in": "query",
        "description": "List of allowed cities.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Vk City",
          "type": "array",
          "description": "List of allowed cities.",
          "items": {
            "type": "string"
          }
        }
      },
      "vk_friend_min": {
        "name": "vk_friend_min",
        "in": "query",
        "description": "Minimum number of friends.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Vk Friend Min",
          "description": "Minimum number of friends.",
          "type": "integer",
          "minimum": 0
        }
      },
      "vk_friend_max": {
        "name": "vk_friend_max",
        "in": "query",
        "description": "Maximum number of friends.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Vk Friend Max",
          "description": "Maximum number of friends.",
          "type": "integer",
          "minimum": 0
        }
      },
      "vk_follower_min": {
        "name": "vk_follower_min",
        "in": "query",
        "description": "Minimum number of followers.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Vk Follower Min",
          "type": "integer",
          "description": "Minimum number of followers.",
          "minimum": 0
        }
      },
      "vk_follower_max": {
        "name": "vk_follower_max",
        "in": "query",
        "description": "Maximum number of followers.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Vk Follower Max",
          "type": "integer",
          "description": "Maximum number of followers.",
          "minimum": 0
        }
      },
      "vk_vote_min": {
        "name": "vk_vote_min",
        "in": "query",
        "description": "Minimum number of votes.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Vk Vote Min",
          "type": "integer",
          "description": "Minimum number of votes.",
          "minimum": 0
        }
      },
      "vk_vote_max": {
        "name": "vk_vote_max",
        "in": "query",
        "description": "Maximum number of votes.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Vk Vote Max",
          "type": "integer",
          "description": "Maximum number of votes.",
          "minimum": 0
        }
      },
      "fortnite_rl_purchases": {
        "name": "rl_purchases",
        "in": "query",
        "description": "Has Rocket League purchases.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "RL Purchases",
          "type": "integer",
          "description": "Has Rocket League purchases.",
          "enum": [
            1
          ]
        }
      },
      "temp_email": {
        "name": "temp_email",
        "in": "query",
        "description": "Access to market temp mail.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Temp Email",
          "description": "Access to market temp mail.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "fortnite_xbox_linkable": {
        "name": "xbox_linkable",
        "in": "query",
        "description": "Can be linked to Xbox.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Xbox Linkable",
          "description": "Can be linked to Xbox.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "fortnite_psn_linkable": {
        "name": "psn_linkable",
        "in": "query",
        "description": "Can be linked to PSN.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Psn Linkable",
          "description": "Can be linked to PSN.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "fortnite_bp_lmin": {
        "name": "bp_lmin",
        "in": "query",
        "description": "Minimum level of Battle Pass.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Bp Lmin",
          "description": "Minimum level of Battle Pass.",
          "type": "integer",
          "minimum": 1,
          "maximum": 100
        }
      },
      "fortnite_bp_lmax": {
        "name": "bp_lmax",
        "in": "query",
        "description": "Maximum level of Battle Pass.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Bp Lmax",
          "description": "Maximum level of Battle Pass.",
          "type": "integer",
          "minimum": 1,
          "maximum": 100
        }
      },
      "fortnite_platform": {
        "name": "platform[]",
        "in": "query",
        "description": "Platform.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Platform",
          "type": "string",
          "description": "Platform.",
          "enum": [
            "Epic",
            "EpicAndroid",
            "EpicPC",
            "EpicPCKorea",
            "GooglePlay",
            "IOSAppStore",
            "Live",
            "Nintendo",
            "PSN",
            "Samsung",
            "xbl"
          ]
        }
      },
      "fortnite_bp": {
        "name": "bp",
        "in": "query",
        "description": "Has Battle Pass.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Bp",
          "description": "Has Battle Pass.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "change_email": {
        "name": "change_email",
        "in": "query",
        "description": "Can change email.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Change Email",
          "description": "Can change email.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "fortnite_dance": {
        "name": "dance[]",
        "in": "query",
        "description": "Dances.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Dance",
          "type": "array",
          "description": "Pickaxes.",
          "items": {
            "type": "string"
          }
        }
      },
      "fortnite_glider": {
        "name": "glider[]",
        "in": "query",
        "description": "Gliders.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Glider",
          "type": "array",
          "description": "Gliders.",
          "items": {
            "type": "string"
          }
        }
      },
      "fortnite_skin": {
        "name": "skin[]",
        "in": "query",
        "description": "Skins.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Skin",
          "type": "array",
          "description": "Skins.",
          "items": {
            "type": "string"
          }
        }
      },
      "fortnite_pickaxe": {
        "name": "pickaxe[]",
        "in": "query",
        "description": "Pickaxes.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Pickaxe",
          "type": "array",
          "description": "Pickaxes.",
          "items": {
            "type": "string"
          }
        }
      },
      "fortnite_vbmin": {
        "name": "vbmin",
        "in": "query",
        "description": "Minimum number of V-Bucks.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Vbmin",
          "type": "integer",
          "minimum": 0,
          "description": "Minimum number of V-Bucks."
        }
      },
      "fortnite_vbmax": {
        "name": "vbmax",
        "in": "query",
        "description": "Maximum number of V-Bucks.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Vbmax",
          "type": "integer",
          "minimum": 0,
          "description": "Maximum number of V-Bucks."
        }
      },
      "smin": {
        "name": "smin",
        "in": "query",
        "description": "Minimum number of skins.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Smin",
          "type": "integer",
          "minimum": 0,
          "description": "Minimum number of skins."
        }
      },
      "smax": {
        "name": "smax",
        "in": "query",
        "description": "Maximum number of skins.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Smax",
          "type": "integer",
          "minimum": 0,
          "description": "Maximum number of skins."
        }
      },
      "order_by": {
        "name": "order_by",
        "in": "query",
        "description": "Order by.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Order By",
          "description": "Order by.",
          "type": "string",
          "enum": [
            "price_to_up",
            "price_to_down",
            "pdate_to_down",
            "pdate_to_down_upload",
            "pdate_to_up",
            "pdate_to_up_upload",
            "exp_auctions"
          ]
        }
      },
      "title": {
        "name": "title",
        "in": "query",
        "description": "The word or words contained in the account title.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Title",
          "type": "string",
          "description": "The word or words contained in the account title."
        }
      },
      "nsb_by_me": {
        "name": "nsb_by_me",
        "in": "query",
        "description": "Not sold by me before.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Not Sold By Me",
          "type": "boolean",
          "description": "Not sold by me before."
        }
      },
      "sb_by_me": {
        "name": "sb_by_me",
        "in": "query",
        "description": "Sold by me before.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Sold By Me",
          "type": "boolean",
          "description": "Sold by me before."
        }
      },
      "nsb": {
        "name": "nsb",
        "in": "query",
        "description": "Not sold before.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Not Sold Before",
          "type": "boolean",
          "description": "Not sold before."
        }
      },
      "sb": {
        "name": "sb",
        "in": "query",
        "description": "Sold before.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Sold Before",
          "type": "boolean",
          "description": "Sold before."
        }
      },
      "origin": {
        "name": "origin[]",
        "in": "query",
        "description": "List of account origins.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Origin",
          "type": "array",
          "description": "List of account origins.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "brute",
              "fishing",
              "stealer",
              "personal",
              "resale",
              "autoreg",
              "dummy"
            ]
          }
        }
      },
      "not_origin": {
        "name": "not_origin[]",
        "in": "query",
        "description": "List of account origins that won't be included.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Not Origin",
          "description": "List of account origins that won't be included.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "brute",
              "fishing",
              "stealer",
              "personal",
              "resale",
              "autoreg",
              "dummy"
            ]
          }
        }
      },
      "auction": {
        "name": "auction",
        "in": "query",
        "description": "Auction.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Auction",
          "description": "Auction.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "item_domain": {
        "name": "item_domain",
        "in": "query",
        "description": "Domain of native/autoreg email.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Item Domain",
          "type": "string",
          "description": "Domain of native/autoreg email."
        }
      },
      "email_type": {
        "name": "email_type[]",
        "in": "query",
        "description": "Email type.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Email Type",
          "description": "Email type.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "market",
              "autoreg",
              "native",
              "no_market",
              "no"
            ]
          }
        }
      },
      "page": {
        "name": "page",
        "in": "query",
        "description": "The number of the page to display results from.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Page",
          "type": "integer",
          "description": "The number of the page to display results from.",
          "minimum": 1
        }
      },
      "pmin": {
        "name": "pmin",
        "in": "query",
        "description": "Minimal price of account (Inclusive).",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Pmin",
          "type": "integer",
          "minimum": 1,
          "description": "Minimal price of account (Inclusive)."
        }
      },
      "pmax": {
        "name": "pmax",
        "in": "query",
        "description": "Maximum price of account (Inclusive).",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Pmax",
          "type": "integer",
          "minimum": 1,
          "description": "Maximum price of account (Inclusive)."
        }
      },
      "steam_map_rank": {
        "name": "cs2_map_rank",
        "in": "query",
        "description": "Map for rank in CS2.\n+ 1 - Dust II\n+ 2 - Mirage\n+ 3 - Train\n+ 4 - Nuke\n+ 5 - Overpass\n+ 6 - Inferno\n+ 7 - Ancient\n+ 8 - Vertigo\n+ 9 - Anubis\n+ 10 - Office",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Cs2 Map Rank",
          "type": "integer",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10
          ]
        }
      },
      "steam_map_rmin": {
        "name": "cs2_map_rmin",
        "in": "query",
        "description": "Minimum rank in CS2 on a certain map.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Cs2 Map Rank Min",
          "type": "integer",
          "minimum": 1,
          "maximum": 18,
          "description": "Minimum rank in CS2 on a certain map."
        }
      },
      "steam_map_rmax": {
        "name": "cs2_map_rmax",
        "in": "query",
        "description": "Maximum rank in CS2 on a certain map.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Cs2 Map Rank Max",
          "type": "integer",
          "minimum": 1,
          "maximum": 18,
          "description": "Maximum rank in CS2 on a certain map."
        }
      },
      "steam_elo_min": {
        "name": "elo_min",
        "in": "query",
        "description": "Minimum Premier ELO in CS2.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Elo Min",
          "type": "integer",
          "minimum": 0,
          "maximum": 50000,
          "description": "Minimum Premier ELO in CS2."
        }
      },
      "steam_elo_max": {
        "name": "elo_max",
        "in": "query",
        "description": "Maximum Premier ELO in CS2.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Elo Max",
          "type": "integer",
          "minimum": 0,
          "maximum": 50000,
          "description": "Maximum Premier ELO in CS2."
        }
      },
      "no_trans": {
        "name": "no_trans",
        "in": "query",
        "description": "Has no transactions.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "No Trans",
          "type": "integer",
          "description": "Has no transactions.",
          "enum": [
            1
          ]
        }
      },
      "steam_trans": {
        "name": "trans",
        "in": "query",
        "description": "Has transactions.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Trans",
          "type": "integer",
          "description": "Has transactions.",
          "enum": [
            1
          ]
        }
      },
      "last_trans_date": {
        "name": "last_trans_date",
        "in": "query",
        "description": "How old is last transaction.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Last Trans Date",
          "type": "integer",
          "minimum": 0,
          "description": "How old is last transaction."
        }
      },
      "last_trans_date_period": {
        "name": "last_trans_date_period",
        "in": "query",
        "description": "In what notation is time measured.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/DatePeriodModel"
        }
      },
      "steam_last_trans_date_later": {
        "name": "last_trans_date_later",
        "in": "query",
        "description": "How new is last transaction.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Last Trans Date Later",
          "type": "integer",
          "minimum": 0,
          "description": "How new is last transaction."
        }
      },
      "steam_last_trans_date_period_later": {
        "name": "last_trans_date_period_later",
        "in": "query",
        "description": "In what notation is time measured.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Last Trans Date Period Later",
          "$ref": "#/components/schemas/DatePeriodModel"
        }
      },
      "steam_relevant_gmax": {
        "name": "relevant_gmax",
        "in": "query",
        "description": "Maximum number of relevant games.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Relevant Gmax",
          "type": "integer",
          "minimum": 0,
          "description": "Maximum number of relevant games."
        }
      },
      "steam_relevant_gmin": {
        "name": "relevant_gmin",
        "in": "query",
        "description": "Minimum number of relevant games.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Relevant Gmin",
          "type": "integer",
          "minimum": 0,
          "description": "Minimum number of relevant games."
        }
      },
      "steam_points_max": {
        "name": "points_max",
        "in": "query",
        "description": "Maximum number of Steam points.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Points Max",
          "type": "integer",
          "minimum": 0,
          "description": "Maximum number of Steam points."
        }
      },
      "steam_points_min": {
        "name": "points_min",
        "in": "query",
        "description": "Minimum number of Steam points.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Points Min",
          "type": "integer",
          "minimum": 0,
          "description": "Minimum number of Steam points."
        }
      },
      "steam_faceit_lvl_max": {
        "name": "faceit_lvl_max",
        "in": "query",
        "description": "Maximum FACEIT level.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Faceit Lvl Max",
          "type": "integer",
          "minimum": 1,
          "maximum": 10,
          "description": "Maximum FACEIT level."
        }
      },
      "steam_faceit_lvl_min": {
        "name": "faceit_lvl_min",
        "in": "query",
        "description": "Minimum FACEIT level.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Faceit Lvl Min",
          "type": "integer",
          "minimum": 1,
          "maximum": 10,
          "description": "Minimum FACEIT level."
        }
      },
      "steam_d2_behavior_max": {
        "name": "d2_behavior_max",
        "in": "query",
        "description": "Maximum number of Dota 2 behavior.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "D2 Behavior Max",
          "type": "integer",
          "minimum": 0,
          "maximum": 12000,
          "description": "Maximum number of Dota 2 behavior."
        }
      },
      "steam_d2_behavior_min": {
        "name": "d2_behavior_min",
        "in": "query",
        "description": "Minimum number of Dota 2 behavior.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "D2 Behavior Min",
          "type": "integer",
          "minimum": 0,
          "maximum": 12000,
          "description": "Minimum number of Dota 2 behavior."
        }
      },
      "steam_d2_win_count_max": {
        "name": "d2_win_count_max",
        "in": "query",
        "description": "Maximum number of Dota 2 wins.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "D2 Win Count Max",
          "type": "integer",
          "minimum": 0,
          "description": "Maximum number of Dota 2 wins."
        }
      },
      "steam_d2_win_count_min": {
        "name": "d2_win_count_min",
        "in": "query",
        "description": "Minimum number of Dota 2 wins.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "D2 Win Count Min",
          "type": "integer",
          "minimum": 0,
          "description": "Minimum number of Dota 2 wins."
        }
      },
      "steam_d2_game_count_max": {
        "name": "d2_game_count_max",
        "in": "query",
        "description": "Maximum number of Dota 2 games.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "D2 Game Count Max",
          "type": "integer",
          "minimum": 0,
          "description": "Maximum number of Dota 2 games."
        }
      },
      "steam_d2_game_count_min": {
        "name": "d2_game_count_min",
        "in": "query",
        "description": "Minimum number of Dota 2 games.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "D2 Game Count Min",
          "type": "integer",
          "minimum": 0,
          "description": "Minimum number of Dota 2 games."
        }
      },
      "steam_solommr_max": {
        "name": "solommr_max",
        "in": "query",
        "description": "Maximum number of Dota 2 MMR.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "SoloMMR Max",
          "type": "integer",
          "minimum": 0,
          "description": "Maximum number of Dota 2 MMR."
        }
      },
      "steam_solommr_min": {
        "name": "solommr_min",
        "in": "query",
        "description": "Minimum number of Dota 2 MMR.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "SoloMMR Min",
          "type": "integer",
          "minimum": 0,
          "description": "Minimum number of Dota 2 MMR."
        }
      },
      "steam_csgo_profile_rank_max": {
        "name": "csgo_profile_rank_max",
        "in": "query",
        "description": "Maximum CS2 rank.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Cs2 Profile Rank Max",
          "type": "integer",
          "minimum": 1,
          "maximum": 40,
          "description": "Maximum CS2 rank."
        }
      },
      "steam_csgo_profile_rank_min": {
        "name": "csgo_profile_rank_min",
        "in": "query",
        "description": "Minimum CS2 rank.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Cs2 Profile Rank Min",
          "type": "integer",
          "minimum": 1,
          "maximum": 40,
          "description": "Minimum CS2 rank."
        }
      },
      "not_country": {
        "name": "not_country[]",
        "in": "query",
        "description": "List of disallowed countries.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Not Country",
          "type": "array",
          "description": "List of disallowed countries.",
          "items": {
            "type": "string"
          }
        }
      },
      "country": {
        "name": "country[]",
        "in": "query",
        "description": "List of allowed countries.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Country",
          "type": "array",
          "description": "List of allowed countries.",
          "items": {
            "type": "string"
          }
        }
      },
      "steam_recently_hours_max": {
        "name": "recently_hours_max",
        "in": "query",
        "description": "Maximum number of recently played hours.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Recently Hours Max",
          "type": "integer",
          "minimum": 0,
          "description": "Maximum number of recently played hours."
        }
      },
      "steam_recently_hours_min": {
        "name": "recently_hours_min",
        "in": "query",
        "description": "Minimum number of recently played hours.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Recently Hours Min",
          "type": "integer",
          "minimum": 0,
          "description": "Minimum number of recently played hours."
        }
      },
      "steam_gift_max": {
        "name": "gift_max",
        "in": "query",
        "description": "Maximum number of gifts.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Gift Max",
          "type": "integer",
          "minimum": 0,
          "description": "Maximum number of gifts."
        }
      },
      "steam_gift_min": {
        "name": "gift_min",
        "in": "query",
        "description": "Minimum number of gifts.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Gift Min",
          "type": "integer",
          "minimum": 0,
          "description": "Minimum number of gifts."
        }
      },
      "steam_gift": {
        "name": "gift[]",
        "in": "query",
        "description": "List of gifts.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Gift",
          "type": "array",
          "description": "List of gifts.",
          "items": {
            "type": "string"
          }
        }
      },
      "steam_medal_max": {
        "name": "medal_max",
        "in": "query",
        "description": "Maximum number of medals.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Medal Max",
          "type": "integer",
          "minimum": 0,
          "description": "Maximum number of medals."
        }
      },
      "steam_medal_min": {
        "name": "medal_min",
        "in": "query",
        "description": "Minimum number of medals.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Medal Min",
          "type": "integer",
          "minimum": 0,
          "description": "Minimum number of medals."
        }
      },
      "steam_medal_id": {
        "name": "medal_id[]",
        "in": "query",
        "description": "List of medal IDs.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Medal Ids",
          "type": "array",
          "description": "List of medal IDs.",
          "items": {
            "type": "integer"
          }
        }
      },
      "steam_win_count_max": {
        "name": "win_count_max",
        "in": "query",
        "description": "Maximum number of wins.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Win Count Max",
          "type": "integer",
          "minimum": 0,
          "description": "Maximum number of wins."
        }
      },
      "steam_win_count_min": {
        "name": "win_count_min",
        "in": "query",
        "description": "Minimum number of wins.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Win Count Min",
          "type": "integer",
          "minimum": 0,
          "description": "Minimum number of wins."
        }
      },
      "steam_gmax": {
        "name": "gmax",
        "in": "query",
        "description": "Maximum number of games.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Gmax",
          "type": "integer",
          "minimum": 0,
          "description": "Maximum number of games."
        }
      },
      "steam_gmin": {
        "name": "gmin",
        "in": "query",
        "description": "Minimum number of games.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Gmin",
          "type": "integer",
          "minimum": 0,
          "description": "Minimum number of games."
        }
      },
      "steam_friend_max": {
        "name": "friend_max",
        "in": "query",
        "description": "Maximum number of friends.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Friend Max",
          "type": "integer",
          "minimum": 0,
          "description": "Maximum number of friends."
        }
      },
      "steam_friend_min": {
        "name": "friend_min",
        "in": "query",
        "description": "Minimum number of friends.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Friend Min",
          "type": "integer",
          "minimum": 0,
          "description": "Minimum number of friends."
        }
      },
      "steam_inv_max": {
        "name": "inv_max",
        "in": "query",
        "description": "Maximum inventory price for game.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Inv Max",
          "type": "integer",
          "minimum": 0,
          "description": "Maximum inventory price for game."
        }
      },
      "steam_inv_min": {
        "name": "inv_min",
        "in": "query",
        "description": "Minimum inventory price for game.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Inv Min",
          "type": "integer",
          "minimum": 0,
          "description": "Minimum inventory price for game."
        }
      },
      "steam_inv_game": {
        "name": "inv_game",
        "in": "query",
        "description": "Game ID to check inventory price.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Inv Game",
          "type": "integer",
          "description": "Game ID to check inventory price."
        }
      },
      "balance_max": {
        "name": "balance_max",
        "in": "query",
        "description": "Maximum balance.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Balance Max",
          "type": "integer",
          "minimum": 0,
          "description": "Maximum balance."
        }
      },
      "balance_min": {
        "name": "balance_min",
        "in": "query",
        "description": "Minimum balance.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Balance Min",
          "type": "integer",
          "maximum": 0,
          "description": "Minimum balance."
        }
      },
      "steam_mm_ban": {
        "name": "mm_ban",
        "in": "query",
        "description": "Has CS2 Matchmaking ban.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Mm Ban",
          "description": "Has CS2 Matchmaking ban.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "steam_no_vac": {
        "name": "no_vac",
        "in": "query",
        "description": "Has no VAC ban.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "No Vac",
          "description": "Has no VAC ban.",
          "type": "integer",
          "enum": [
            1
          ]
        }
      },
      "steam_wingman_rmax": {
        "name": "wingman_rmax",
        "in": "query",
        "description": "Maximum rank in CS2 Wingman.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Wingman Rmax",
          "type": "integer",
          "minimum": 1,
          "maximum": 18,
          "description": "Maximum rank in CS2 Wingman."
        }
      },
      "steam_wingman_rmin": {
        "name": "wingman_rmin",
        "in": "query",
        "description": "Minimum rank in CS2 Wingman.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Wingman Rmin",
          "type": "integer",
          "minimum": 1,
          "maximum": 18,
          "description": "Minimum rank in CS2 Wingman."
        }
      },
      "steam_rmax": {
        "name": "rmax",
        "in": "query",
        "description": "Maximum rank in CS2 Matchmaking.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Rmax",
          "type": "integer",
          "minimum": 1,
          "maximum": 18,
          "description": "Maximum rank in CS2 Matchmaking."
        }
      },
      "steam_rmin": {
        "name": "rmin",
        "in": "query",
        "description": "Minimum rank in CS2 Matchmaking.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Rmin",
          "type": "integer",
          "minimum": 1,
          "maximum": 18,
          "description": "Minimum rank in CS2 Matchmaking."
        }
      },
      "daybreak": {
        "name": "daybreak",
        "in": "query",
        "description": "Number of days the account has been offline.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Day Break",
          "type": "integer",
          "minimum": 0,
          "description": "Number of days the account has been offline."
        }
      },
      "reg": {
        "name": "reg",
        "in": "query",
        "description": "How old is the account.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Reg",
          "type": "integer",
          "minimum": 0,
          "description": "How old is the account."
        }
      },
      "reg_period": {
        "name": "reg_period",
        "in": "query",
        "description": "In what notation is time measured.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Reg Period",
          "$ref": "#/components/schemas/DatePeriodModel"
        }
      },
      "game": {
        "name": "game[]",
        "in": "query",
        "description": "List of games.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Game",
          "type": "array",
          "description": "List of games.",
          "items": {
            "type": "string"
          }
        }
      },
      "game_int": {
        "name": "game[]",
        "in": "query",
        "description": "List of games.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Game",
          "type": "array",
          "description": "List of games.",
          "items": {
            "type": "integer"
          }
        }
      },
      "steam_hours_played": {
        "name": "hours_played",
        "in": "query",
        "description": "List of minimum hours played by game.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Hours Played",
          "type": "array",
          "description": "List of minimum hours played by game.",
          "items": {
            "type": "integer"
          }
        }
      },
      "steam_hours_played_max": {
        "name": "hours_played_max",
        "in": "query",
        "description": "List of maximum hours played by game.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Hours Played Max",
          "type": "array",
          "description": "List of maximum hours played by game.",
          "items": {
            "type": "integer"
          }
        }
      },
      "steam_limit": {
        "name": "limit",
        "in": "query",
        "description": "Has 5 $ limit.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Limit",
          "description": "Has 5 $ limit.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "lmin": {
        "name": "lmin",
        "in": "query",
        "description": "Minimum level.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Lmin",
          "type": "integer",
          "minimum": 0,
          "description": "Minimum level."
        }
      },
      "lmax": {
        "name": "lmax",
        "in": "query",
        "description": "Maximum level.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Lmax",
          "type": "integer",
          "minimum": 0,
          "description": "Maximum level."
        }
      },
      "steam_mafile": {
        "name": "mafile",
        "in": "query",
        "description": "Has .mafile (Steam Guard Authenticator).",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Mafile",
          "description": "Has .mafile (Steam Guard Authenticator).",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "steam_rt": {
        "name": "rt",
        "in": "query",
        "description": "Has community ban.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Rt",
          "description": "Has community ban.",
          "type": "string",
          "enum": [
            "yes",
            "no",
            "nomatter"
          ],
          "default": "no"
        }
      },
      "steam_trade_ban": {
        "name": "trade_ban",
        "in": "query",
        "description": "Has lifetime trade ban.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Trade Ban",
          "description": "Has lifetime trade ban.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "steam_trade_limit": {
        "name": "trade_limit",
        "in": "query",
        "description": "Has temporary trade limit.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Trade Limit",
          "description": "Has temporary trade limit.",
          "$ref": "#/components/schemas/YesNoNoMatterScheme"
        }
      },
      "steam_vac": {
        "name": "vac[]",
        "in": "query",
        "description": "List of VAC bans by game.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "title": "Vac",
          "type": "array",
          "description": "List of VAC bans by game.",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "responses": {
      "UpdateInventoryValue_200": {
        "description": "Successful Response.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Update Inventory Value 200",
              "required": [
                "status",
                "item",
                "system_info"
              ],
              "type": "object",
              "properties": {
                "status": {
                  "$ref": "#/components/schemas/StatusOK"
                },
                "item": {
                  "$ref": "#/components/schemas/ItemModel"
                },
                "system_info": {
                  "$ref": "#/components/schemas/SystemInfoModel"
                }
              }
            }
          }
        }
      },
      "AdNotFoundModel": {
        "description": "Error Response.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Ad Not Found",
              "type": "object",
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "Ad not found."
                  }
                },
                "system_info": {
                  "$ref": "#/components/schemas/SystemInfoModel"
                }
              }
            },
            "examples": {
              "AdNotFound": {
                "summary": "Ad not found error",
                "value": {
                  "errors": [
                    "Ad not found."
                  ],
                  "system_info": {
                    "visitor_id": 0,
                    "time": 0
                  }
                }
              }
            }
          }
        }
      },
      "NoPermissionModel": {
        "description": "Error Response.",
        "content": {
          "application/json": {
            "schema": {
              "title": "No Permission Error",
              "type": "object",
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "You do not have permission to view this page or perform this action."
                  }
                },
                "system_info": {
                  "$ref": "#/components/schemas/SystemInfoModel"
                }
              }
            },
            "examples": {
              "NoPermission": {
                "summary": "No permission",
                "value": {
                  "errors": [
                    "You do not have permission to view this page or perform this action."
                  ],
                  "system_info": {
                    "visitor_id": 0,
                    "time": 0
                  }
                }
              }
            }
          }
        }
      },
      "ErrorModel": {
        "description": "Error Response.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Market Error",
              "type": "object",
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "default"
                  }
                },
                "system_info": {
                  "$ref": "#/components/schemas/SystemInfoModel"
                }
              }
            },
            "examples": {
              "Captcha": {
                "summary": "Captcha error",
                "value": {
                  "errors": [
                    "captcha"
                  ],
                  "system_info": {
                    "visitor_id": 0,
                    "time": 0
                  }
                }
              },
              "Sold": {
                "summary": "Item is sold error",
                "value": {
                  "errors": [
                    "This item is sold."
                  ],
                  "system_info": {
                    "visitor_id": 0,
                    "time": 0
                  }
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "StatusOK": {
        "title": "Status",
        "type": "string",
        "default": "ok"
      },
      "CurrencyModel": {
        "title": "Currency",
        "type": "string",
        "description": "Using currency.",
        "enum": [
          "rub",
          "uah",
          "kzt",
          "byn",
          "usd",
          "eur",
          "gbp",
          "cny",
          "try"
        ]
      },
      "CategoryIdModel": {
        "title": "Category Id",
        "type": "integer",
        "description": "Accounts category.",
        "enum": [
          1,
          2,
          3,
          4,
          5,
          7,
          9,
          10,
          11,
          12,
          13,
          14,
          16,
          15,
          17,
          18,
          19,
          20,
          22,
          23,
          24,
          25,
          26,
          27
        ]
      },
      "DatePeriodModel": {
        "type": "string",
        "enum": [
          "day",
          "month",
          "year"
        ],
        "description": "In what notation is time measured."
      },
      "YesNoNoMatterScheme": {
        "type": "string",
        "enum": [
          "yes",
          "no",
          "nomatter"
        ]
      },
      "AccountListModel": {
        "title": "AccountListModel",
        "required": [
          "items",
          "page",
          "perPage",
          "searchUrl",
          "totalItems",
          "totalItemsPrice"
        ],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "totalItems": {
            "title": "Totalitems",
            "type": "integer"
          },
          "totalItemsPrice": {
            "title": "Totalitemsprice",
            "type": "integer"
          },
          "perPage": {
            "title": "Perpage",
            "type": "integer"
          },
          "page": {
            "title": "Page",
            "type": "integer"
          },
          "searchUrl": {
            "title": "Searchurl",
            "type": "string"
          }
        }
      },
      "AuctionModel": {
        "title": "Auction",
        "type": "object",
        "properties": {
          "itemId": {
            "title": "item Id",
            "type": "integer"
          },
          "bids": {
            "title": "Bids",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuctionBidModel"
            }
          },
          "is_finished": {
            "title": "Is Finished",
            "type": "integer"
          },
          "endTime": {
            "title": "End Time",
            "type": "integer"
          },
          "currencies": {
            "title": "Currencies",
            "type": "object",
            "properties": {
              "{currency}": {
                "$ref": "#/components/schemas/AuctionCurrencyModel"
              }
            }
          },
          "userCurrency": {
            "title": "User Currency",
            "type": "string"
          },
          "minAllowedBidValue": {
            "$ref": "#/components/schemas/AuctionBidValueModel"
          },
          "startValue": {
            "$ref": "#/components/schemas/AuctionBidValueModel"
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "AuctionBidModel": {
        "title": "Bid",
        "type": "object",
        "properties": {
          "bid_id": {
            "title": "Bid Id",
            "type": "integer"
          },
          "bid_value": {
            "$ref": "#/components/schemas/AuctionBidValueTextModel"
          },
          "minAllowedBidValue": {
            "$ref": "#/components/schemas/AuctionBidValueModel"
          },
          "bid_previous_value": {
            "$ref": "#/components/schemas/AuctionBidValueTextModel"
          },
          "user": {
            "$ref": "#/components/schemas/AuctionUserModel"
          },
          "bid_date": {
            "title": "Bid Date",
            "type": "integer"
          },
          "canCancelBid": {
            "title": "Can Cancel Bid",
            "type": "boolean",
            "default": false
          },
          "endTimeAuction": {
            "title": "End Time Auction",
            "type": "integer"
          }
        }
      },
      "AuctionBidNewModel": {
        "title": "Auction New Bid",
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string",
            "default": "ok"
          },
          "bid": {
            "$ref": "#/components/schemas/AuctionBidModel"
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "AuctionErrorTimeExpiredModel": {
        "title": "Auction Error Time Expired",
        "type": "object",
        "properties": {
          "errors": {
            "title": "Errors",
            "type": "array",
            "items": {
              "type": "string",
              "default": "The time to cancel the bid has expired"
            }
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "AuctionBidDeleteModel": {
        "title": "Auction Bid Delete",
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string",
            "default": "ok"
          },
          "message": {
            "title": "Message",
            "type": "string",
            "default": "The bid success deleted"
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "AuctionErrorLastBidModel": {
        "title": "Auction Error Last Bid",
        "type": "object",
        "properties": {
          "errors": {
            "title": "Errors",
            "type": "array",
            "items": {
              "type": "string",
              "default": "Your last bet has not yet been beaten by anyone."
            }
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "AuctionUserModel": {
        "title": "Auction User",
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "integer"
          },
          "avatar": {
            "title": "Avatar",
            "type": "string"
          },
          "usernameHtml": {
            "title": "Username Html",
            "type": "string"
          }
        }
      },
      "AuctionBidValueModel": {
        "title": "Bid Value",
        "type": "object",
        "properties": {
          "rub": {
            "title": "rub",
            "type": "integer"
          },
          "uah": {
            "title": "uah",
            "type": "integer"
          },
          "kzt": {
            "title": "kzt",
            "type": "integer"
          },
          "byn": {
            "title": "byn",
            "type": "integer"
          },
          "usd": {
            "title": "usd",
            "type": "integer"
          },
          "eur": {
            "title": "eur",
            "type": "integer"
          },
          "gbp": {
            "title": "gbp",
            "type": "integer"
          },
          "cny": {
            "title": "cny",
            "type": "integer"
          },
          "try": {
            "title": "try",
            "type": "integer"
          }
        }
      },
      "AuctionBidValueTextModel": {
        "title": "Bid Value",
        "type": "object",
        "properties": {
          "rub": {
            "title": "rub",
            "type": "string"
          },
          "uah": {
            "title": "uah",
            "type": "string"
          },
          "kzt": {
            "title": "kzt",
            "type": "string"
          },
          "byn": {
            "title": "byn",
            "type": "string"
          },
          "usd": {
            "title": "usd",
            "type": "string"
          },
          "eur": {
            "title": "eur",
            "type": "string"
          },
          "gbp": {
            "title": "gbp",
            "type": "string"
          },
          "cny": {
            "title": "cny",
            "type": "string"
          },
          "try": {
            "title": "try",
            "type": "string"
          }
        }
      },
      "AuctionCurrencyModel": {
        "title": "Auction Currency",
        "type": "object",
        "properties": {
          "title": {
            "title": "Title",
            "type": "string"
          },
          "symbol": {
            "title": "Symbol",
            "type": "string"
          },
          "rate": {
            "$ref": "#/components/schemas/AuctionRateModel"
          }
        }
      },
      "AuctionRateModel": {
        "title": "Auction Rate",
        "type": "object",
        "properties": {
          "Value": {
            "title": "Value",
            "type": "integer"
          },
          "Nominal": {
            "title": "Nominal",
            "type": "integer"
          }
        }
      },
      "AddGoodsModel": {
        "title": "AddGoodsModel",
        "required": [
          "ignoreCookieUpload",
          "item",
          "sessionLoginData",
          "system_info",
          "temp_email"
        ],
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/GoodsItem"
          },
          "temp_email": {
            "title": "Temp Email",
            "type": "string"
          },
          "sessionLoginData": {
            "title": "Sessionlogindata",
            "type": "array",
            "items": {}
          },
          "ignoreCookieUpload": {
            "title": "Ignorecookieupload",
            "type": "boolean"
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "AddTagModel": {
        "title": "AddTagModel",
        "required": [
          "addedTagId",
          "deleteTags",
          "itemId",
          "system_info",
          "tag"
        ],
        "type": "object",
        "properties": {
          "itemId": {
            "title": "Itemid",
            "type": "integer"
          },
          "tag": {
            "$ref": "#/components/schemas/Tag"
          },
          "addedTagId": {
            "title": "Addedtagid",
            "type": "integer"
          },
          "deleteTags": {
            "title": "Deletetags",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "BatchModel": {
        "title": "BatchModel",
        "type": "array",
        "maxItems": 10,
        "items": {
          "title": "Batch Job",
          "required": [
            "uri"
          ],
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "string",
              "description": "identifier for the job, will be use in output as key of a result set. If this parameter is not set, the URI will be used."
            },
            "uri": {
              "title": "Uri",
              "type": "string",
              "description": "URI of the API request to execute."
            },
            "method": {
              "title": "Method",
              "type": "string",
              "description": "HTTP method of the API request to execute. If this parameter is not set, GET HTTP method will be used.",
              "enum": [
                "GET",
                "POST",
                "PUT",
                "DELETE"
              ]
            },
            "params": {
              "title": "Params",
              "required": [
                "key"
              ],
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "description": "parameters of the API request to execute."
            }
          }
        }
      },
      "Category": {
        "title": "Category",
        "required": [
          "category_description",
          "category_id",
          "category_title",
          "links",
          "permissions"
        ],
        "type": "object",
        "properties": {
          "category_id": {
            "title": "Category Id",
            "type": "integer"
          },
          "category_title": {
            "title": "Category Title",
            "type": "string"
          },
          "category_description": {
            "title": "Category Description",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links"
          },
          "permissions": {
            "$ref": "#/components/schemas/Permissions"
          }
        }
      },
      "Categories": {
        "title": "Categories",
        "required": [
          "category",
          "system_info"
        ],
        "type": "object",
        "properties": {
          "0": {
            "$ref": "#/components/schemas/Category"
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "CategoryModel": {
        "title": "CategoryModel",
        "required": [
          "category",
          "system_info"
        ],
        "type": "object",
        "properties": {
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "ChangePasswordModel": {
        "title": "ChangePasswordModel",
        "required": [
          "new_password"
        ],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/StatusOK"
          },
          "message": {
            "title": "Message",
            "type": "string",
            "default": "Changes Saved"
          },
          "new_password": {
            "title": "New Password",
            "type": "string"
          }
        }
      },
      "CheckAccBuyModel": {
        "title": "CheckAccBuyModel",
        "required": [
          "item",
          "system_info"
        ],
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string",
            "default": "ok"
          },
          "item": {
            "$ref": "#/components/schemas/market_api__schemas__items__fast_buy__Item"
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "CodeData": {
        "title": "CodeData",
        "required": [
          "code",
          "date",
          "textPlain"
        ],
        "type": "object",
        "properties": {
          "code": {
            "title": "Code",
            "type": "string"
          },
          "date": {
            "title": "Date",
            "type": "integer"
          },
          "textPlain": {
            "title": "Textplain",
            "type": "string"
          }
        }
      },
      "ConfCodeItem": {
        "title": "ConfCodeItem",
        "required": [
          "account"
        ],
        "type": "object",
        "properties": {
          "account": {
            "title": "Account",
            "type": "string"
          }
        }
      },
      "AddItemModel": {
        "title": "AddItemModel",
        "required": [
          "item",
          "status",
          "system_info"
        ],
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string",
            "default": "ok"
          },
          "item": {
            "$ref": "#/components/schemas/GoodsItem"
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "FastSellModel": {
        "title": "FastSellModel",
        "required": [
          "item",
          "message",
          "status",
          "system_info"
        ],
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/ItemModel"
          },
          "itemLink": {
            "title": "Item link",
            "type": "string"
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "ConfCodeModel": {
        "title": "ConfCodeModel",
        "required": [
          "codeData",
          "item"
        ],
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/ItemsModel"
          },
          "codeData": {
            "$ref": "#/components/schemas/CodeData"
          }
        }
      },
      "TgCodeModel": {
        "title": "TgCodeModel",
        "required": [
          "codes",
          "item"
        ],
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/ItemsModel"
          },
          "codes": {
            "$ref": "#/components/schemas/TgCodeData"
          }
        }
      },
      "TgCodeData": {
        "title": "TgCodeData",
        "type": "object",
        "properties": {
          "code": {
            "title": "Code",
            "type": "string"
          },
          "date": {
            "title": "Date",
            "type": "integer"
          }
        }
      },
      "ConfirmBuyModel": {
        "title": "ConfirmBuyModel",
        "required": [
          "item",
          "reserve_end_date",
          "system_info"
        ],
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string",
            "default": "ok"
          },
          "reserve_end_date": {
            "title": "Reserve End Date",
            "type": "integer"
          },
          "item": {
            "$ref": "#/components/schemas/ItemLoginData"
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "FastBuyModel": {
        "title": "FastBuyModel",
        "required": [
          "item",
          "reserve_end_date",
          "system_info"
        ],
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string",
            "default": "ok"
          },
          "reserve_end_date": {
            "title": "Reserve End Date",
            "type": "integer"
          },
          "item": {
            "$ref": "#/components/schemas/market_api__schemas__items__fast_buy__Item"
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "Game": {
        "title": "Game",
        "required": [
          "abbr",
          "app_id",
          "category_id",
          "img",
          "ru",
          "title",
          "url"
        ],
        "type": "object",
        "properties": {
          "app_id": {
            "title": "App Id",
            "type": "string"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "abbr": {
            "title": "Abbr",
            "type": "string"
          },
          "category_id": {
            "title": "Category Id",
            "type": "integer"
          },
          "img": {
            "title": "Img",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          },
          "ru": {
            "title": "Ru",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GamesModel": {
        "title": "GamesModel",
        "required": [
          "games",
          "isIsolatedMarket",
          "isIsolatedMarketAlt",
          "system_info"
        ],
        "type": "object",
        "properties": {
          "games": {
            "title": "Games",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Game"
            }
          },
          "isIsolatedMarket": {
            "title": "Isisolatedmarket",
            "type": "boolean"
          },
          "isIsolatedMarketAlt": {
            "title": "Isisolatedmarketalt",
            "type": "boolean"
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "GoodsItem": {
        "title": "GoodsItem",
        "required": [
          "item_id",
          "item_state"
        ],
        "type": "object",
        "properties": {
          "item_id": {
            "title": "Item Id",
            "type": "integer"
          },
          "item_state": {
            "title": "Item State",
            "type": "string"
          }
        }
      },
      "GoodsCheck": {
        "title": "GoodsCheck",
        "required": [
          "item",
          "message",
          "status",
          "system_info"
        ],
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "item": {
            "$ref": "#/components/schemas/ItemModel"
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "HistoryPaymentsModel": {
        "title": "HistoryPaymentsModel",
        "required": [
          "hasNextPage",
          "lastOperationId",
          "nextPageHref",
          "payments",
          "system_info"
        ],
        "type": "object",
        "properties": {
          "payments": {
            "$ref": "#/components/schemas/Payments"
          },
          "hasNextPage": {
            "title": "Hasnextpage",
            "type": "boolean"
          },
          "lastOperationId": {
            "title": "Lastoperationid",
            "type": "integer"
          },
          "nextPageHref": {
            "title": "Nextpagehref",
            "type": "string"
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "SteamValueModel": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/SteamValueData"
          },
          "appId": {
            "type": "integer"
          },
          "isIsolatedMarket": {
            "type": "boolean"
          },
          "isIsolatedMarketAlt": {
            "type": "boolean"
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "SteamValueData": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "appId": {
            "type": "integer"
          },
          "appTitle": {
            "type": "string"
          },
          "totalValue": {
            "type": "integer"
          },
          "itemCount": {
            "type": "integer"
          },
          "marketableItemCount": {
            "type": "integer"
          },
          "currency": {
            "type": "string"
          },
          "currencyIcon": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "time": {
            "type": "integer"
          }
        }
      },
      "ItemLoginData": {
        "title": "ItemLoginData",
        "required": [
          "loginData"
        ],
        "type": "object",
        "properties": {
          "loginData": {
            "$ref": "#/components/schemas/LoginData"
          }
        }
      },
      "ItemsModel": {
        "title": "ItemsModel",
        "required": [
          "item",
          "seller"
        ],
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/ItemModel"
          },
          "seller": {
            "$ref": "#/components/schemas/Seller"
          }
        }
      },
      "JobId": {
        "title": "JobId",
        "type": "object",
        "properties": {}
      },
      "Jobs": {
        "title": "Jobs",
        "required": [
          "job_id"
        ],
        "type": "object",
        "properties": {
          "job_id": {
            "$ref": "#/components/schemas/JobId"
          }
        }
      },
      "JobsModel": {
        "title": "JobsModel",
        "required": [
          "jobs"
        ],
        "type": "object",
        "properties": {
          "jobs": {
            "$ref": "#/components/schemas/Jobs"
          }
        }
      },
      "Links": {
        "title": "Links",
        "required": [
          "detail",
          "permalink",
          "sub-categories",
          "sub-forums"
        ],
        "type": "object",
        "properties": {
          "permalink": {
            "title": "Permalink",
            "type": "string"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "sub-categories": {
            "title": "Sub-Categories",
            "type": "string"
          },
          "sub-forums": {
            "title": "Sub-Forums",
            "type": "string"
          }
        }
      },
      "LoginData": {
        "title": "LoginData",
        "required": [
          "adviceToChangePassword",
          "encodedOldPassword",
          "encodedPassword",
          "encodedRaw",
          "login",
          "oldPassword",
          "password",
          "raw"
        ],
        "type": "object",
        "properties": {
          "raw": {
            "title": "Raw",
            "type": "string"
          },
          "encodedRaw": {
            "title": "Encodedraw",
            "type": "string"
          },
          "login": {
            "title": "Login",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "encodedPassword": {
            "title": "Encodedpassword",
            "type": "string"
          },
          "oldPassword": {
            "title": "Oldpassword",
            "type": "string"
          },
          "encodedOldPassword": {
            "title": "Encodedoldpassword",
            "type": "string"
          },
          "adviceToChangePassword": {
            "title": "Advicetochangepassword",
            "type": "boolean"
          }
        }
      },
      "MaFileModel": {
        "title": "MaFileModel",
        "required": [
          "maFile"
        ],
        "type": "object",
        "properties": {
          "maFile": {
            "title": "Mafile",
            "type": "object"
          }
        }
      },
      "MeModel": {
        "title": "MeModel",
        "required": [
          "user"
        ],
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "OkModel": {
        "title": "OkModel",
        "required": [
          "status",
          "message",
          "system_info"
        ],
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string",
            "default": "ok"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "IncorrectProxyModel": {
        "title": "Incorrect Proxy",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "string",
              "default": "Please enter correct proxy row like ip:port:user:pass."
            }
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "SoldItemModel": {
        "title": "Item is Sold",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "string",
              "default": "This item is sold."
            }
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "TagNotFoundModel": {
        "title": "Tag Not Found",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "string",
              "default": "The requested tag could not be found."
            }
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "PageNotFoundModel": {
        "title": "Page Not Found",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "string",
              "default": "The requested page could not be found."
            }
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "InvalidBatchModel": {
        "title": "Invalid Batch",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "string",
              "default": "/batch requires valid JSON for jobs input."
            }
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "ProxyNotFoundModel": {
        "title": "Proxy Not Found",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "string",
              "default": "Requested proxy server not found."
            }
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "NoTempMailModel": {
        "title": "No Temp Mail",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "string",
              "default": "There is no temp mail for this account. Call GET /goods/add to receive temp mail."
            }
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "InvalidSAModel": {
        "title": "Invalid Secret Answer",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "string",
              "default": "You entered invalid secret answer."
            }
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "UserNotFoundModel": {
        "title": "User Not Found",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "string",
              "default": "The requested user could not be found."
            }
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "Payments": {
        "title": "Payments",
        "required": [
          "payment"
        ],
        "type": "object",
        "properties": {
          "payment": {
            "title": "Payment",
            "type": "string"
          }
        }
      },
      "Permissions": {
        "title": "Permissions",
        "required": [
          "delete",
          "edit",
          "view"
        ],
        "type": "object",
        "properties": {
          "view": {
            "title": "View",
            "type": "boolean"
          },
          "edit": {
            "title": "Edit",
            "type": "boolean"
          },
          "delete": {
            "title": "Delete",
            "type": "boolean"
          }
        }
      },
      "Proxy": {
        "title": "Proxy",
        "required": [
          "proxy"
        ],
        "type": "object",
        "properties": {
          "proxy": {
            "$ref": "#/components/schemas/Proxy1"
          }
        }
      },
      "Proxy1": {
        "title": "Proxy1",
        "required": [
          "proxyString",
          "proxy_id",
          "proxy_ip",
          "proxy_pass",
          "proxy_port",
          "proxy_user",
          "user_id"
        ],
        "type": "object",
        "properties": {
          "proxy_id": {
            "title": "Proxy Id",
            "type": "integer"
          },
          "user_id": {
            "title": "User Id",
            "type": "integer"
          },
          "proxy_ip": {
            "title": "Proxy Ip",
            "type": "string"
          },
          "proxy_port": {
            "title": "Proxy Port",
            "type": "integer"
          },
          "proxy_user": {
            "title": "Proxy User",
            "type": "string"
          },
          "proxy_pass": {
            "title": "Proxy Pass",
            "type": "string"
          },
          "proxyString": {
            "title": "Proxystring",
            "type": "string"
          }
        }
      },
      "ProxyModel": {
        "title": "ProxyModel",
        "required": [
          "proxies",
          "system_info"
        ],
        "type": "object",
        "properties": {
          "proxies": {
            "title": "Proxies",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Proxy"
            }
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "ReserveBuyModel": {
        "title": "ReserveBuyModel",
        "required": [
          "item",
          "reserve_end_date",
          "system_info"
        ],
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string",
            "default": "ok"
          },
          "reserve_end_date": {
            "title": "Reserve End Date",
            "type": "integer"
          },
          "item": {
            "$ref": "#/components/schemas/market_api__schemas__items__fast_buy__Item"
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "SaveChangesModel": {
        "title": "SaveChangesModel",
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string",
            "default": "ok"
          },
          "message": {
            "title": "Message",
            "type": "string",
            "default": "Changes Saved"
          }
        }
      },
      "Seller": {
        "title": "Seller",
        "required": [
          "avatar_date",
          "display_style_group_id",
          "secondary_group_ids",
          "uniq_username_css",
          "user_group_id",
          "user_id",
          "username"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "integer"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "avatar_date": {
            "title": "Avatar Date",
            "type": "integer"
          },
          "user_group_id": {
            "title": "User Group Id",
            "type": "integer"
          },
          "secondary_group_ids": {
            "title": "Secondary Group Ids",
            "type": "string"
          },
          "display_style_group_id": {
            "title": "Display Style Group Id",
            "type": "integer"
          },
          "uniq_username_css": {
            "title": "Uniq Username Css",
            "type": "string"
          }
        }
      },
      "Tag": {
        "title": "Tag",
        "required": [
          "bc",
          "forOwnedAccountsOnly",
          "isDefault",
          "tag_id",
          "title"
        ],
        "type": "object",
        "properties": {
          "tag_id": {
            "title": "Tag Id",
            "type": "integer"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "isDefault": {
            "title": "Isdefault",
            "type": "boolean"
          },
          "forOwnedAccountsOnly": {
            "title": "Forownedaccountsonly",
            "type": "boolean"
          },
          "bc": {
            "title": "Bc",
            "type": "string"
          }
        }
      },
      "TempEmailPasswordItem": {
        "title": "TempEmailPasswordItem",
        "required": [
          "account"
        ],
        "type": "object",
        "properties": {
          "account": {
            "title": "Account",
            "type": "string"
          }
        }
      },
      "TempEmailPasswordModel": {
        "title": "TempEmailPasswordModel",
        "required": [
          "item"
        ],
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/TempEmailPasswordItem"
          }
        }
      },
      "User": {
        "title": "User",
        "required": [
          "balance",
          "hold",
          "short_link",
          "system_info",
          "user_dob_day",
          "user_dob_month",
          "user_dob_year",
          "user_email",
          "user_id",
          "user_last_seen_date",
          "user_like_count",
          "user_message_count",
          "user_register_date",
          "user_title",
          "user_unread_notification_count",
          "username"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "integer"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "user_message_count": {
            "title": "User Message Count",
            "type": "integer"
          },
          "user_register_date": {
            "title": "User Register Date",
            "type": "integer"
          },
          "user_like_count": {
            "title": "User Like Count",
            "type": "integer"
          },
          "short_link": {
            "title": "Short Link",
            "type": "string"
          },
          "user_email": {
            "title": "User Email",
            "type": "string"
          },
          "user_unread_notification_count": {
            "title": "User Unread Notification Count",
            "type": "integer"
          },
          "user_dob_day": {
            "title": "User Dob Day",
            "type": "integer"
          },
          "user_dob_month": {
            "title": "User Dob Month",
            "type": "integer"
          },
          "user_dob_year": {
            "title": "User Dob Year",
            "type": "integer"
          },
          "user_title": {
            "title": "User Title",
            "type": "string"
          },
          "user_last_seen_date": {
            "title": "User Last Seen Date",
            "type": "integer"
          },
          "balance": {
            "title": "Balance",
            "type": "integer"
          },
          "hold": {
            "title": "Hold",
            "type": "integer"
          },
          "system_info": {
            "$ref": "#/components/schemas/SystemInfoModel"
          }
        }
      },
      "ItemModel": {
        "title": "Item",
        "required": [
          "description",
          "information",
          "item_id",
          "item_origin",
          "item_state",
          "login",
          "price",
          "published_date",
          "refreshed_date",
          "temp_email",
          "title",
          "update_stat_date",
          "view_count",
          "category_id"
        ],
        "type": "object",
        "properties": {
          "item_id": {
            "title": "Item Id",
            "type": "integer"
          },
          "item_state": {
            "title": "Item State",
            "type": "string"
          },
          "category_id": {
            "title": "Category id",
            "type": "integer"
          },
          "published_date": {
            "title": "Published Date",
            "type": "string"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "price": {
            "title": "Price",
            "type": "integer"
          },
          "update_stat_date": {
            "title": "Update Stat Date",
            "type": "integer"
          },
          "refreshed_date": {
            "title": "Refreshed Date",
            "type": "integer"
          },
          "login": {
            "title": "Login",
            "type": "string"
          },
          "temp_email": {
            "title": "Temp Email",
            "type": "string"
          },
          "view_count": {
            "title": "View Count",
            "type": "integer"
          },
          "information": {
            "title": "Information",
            "type": "string"
          },
          "item_origin": {
            "title": "Item Origin",
            "type": "string"
          }
        }
      },
      "market_api__schemas__items__fast_buy__Item": {
        "title": "Item",
        "required": [
          "account"
        ],
        "type": "object",
        "properties": {
          "account": {
            "title": "Account",
            "type": "string"
          }
        }
      },
      "SystemInfoModel": {
        "title": "SystemInfo",
        "required": [
          "time",
          "visitor_id"
        ],
        "type": "object",
        "properties": {
          "visitor_id": {
            "title": "Visitor Id",
            "type": "integer"
          },
          "time": {
            "title": "Time",
            "type": "integer"
          }
        }
      },
      "TelegramClientModel": {
        "title": "Telegram client",
        "type": "string",
        "example": "{\"telegram_api_id\": integer, \"telegram_api_hash\": string, \"telegram_device_model\": string, \"telegram_system_version\": string, \"telegram_app_version\": string}"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "description": "You can get your token [here](https://zelenka.guru/account/api).",
        "scheme": "bearer"
      }
    }
  },
  "x-readme": {
    "explorer-enabled": true,
    "proxy-enabled": true,
    "samples-enabled": true
  }
}